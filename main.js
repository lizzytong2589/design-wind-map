(()=>{var __webpack_modules__={480:function(__unused_webpack_module,exports){eval("(function (global, factory) {\n   true ? factory(exports) : 0;\n})(this, function (exports) {\n  'use strict';\n\n  /* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  var isBrowser = typeof window !== 'undefined';\n  // allow consuming libraries to provide their own Promise implementations\n  var utils = {\n    Promise: isBrowser ? window['Promise'] : undefined\n  };\n\n  /* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  var DEFAULT_VERSION = '4.25';\n  var NEXT = 'next';\n  function parseVersion(version) {\n    if (version.toLowerCase() === NEXT) {\n      return NEXT;\n    }\n    var match = version && version.match(/^(\\d)\\.(\\d+)/);\n    return match && {\n      major: parseInt(match[1], 10),\n      minor: parseInt(match[2], 10)\n    };\n  }\n  /**\n   * Get the CDN url for a given version\n   *\n   * @param version Ex: '4.25' or '3.42'. Defaults to the latest 4.x version.\n   */\n  function getCdnUrl(version) {\n    if (version === void 0) {\n      version = DEFAULT_VERSION;\n    }\n    return \"https://js.arcgis.com/\".concat(version, \"/\");\n  }\n  /**\n   * Get the CDN url for a the CSS for a given version and/or theme\n   *\n   * @param version Ex: '4.25', '3.42', or 'next'. Defaults to the latest 4.x version.\n   */\n  function getCdnCssUrl(version) {\n    if (version === void 0) {\n      version = DEFAULT_VERSION;\n    }\n    var baseUrl = getCdnUrl(version);\n    var parsedVersion = parseVersion(version);\n    if (parsedVersion !== NEXT && parsedVersion.major === 3) {\n      // NOTE: at 3.11 the CSS moved from the /js folder to the root\n      var path = parsedVersion.minor <= 10 ? 'js/' : '';\n      return \"\".concat(baseUrl).concat(path, \"esri/css/esri.css\");\n    } else {\n      // assume 4.x\n      return \"\".concat(baseUrl, \"esri/themes/light/main.css\");\n    }\n  }\n\n  /* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  function createStylesheetLink(href) {\n    var link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = href;\n    return link;\n  }\n  function insertLink(link, before) {\n    if (before) {\n      // the link should be inserted before a specific node\n      var beforeNode = document.querySelector(before);\n      beforeNode.parentNode.insertBefore(link, beforeNode);\n    } else {\n      // append the link to then end of the head tag\n      document.head.appendChild(link);\n    }\n  }\n  // check if the css url has been injected or added manually\n  function getCss(url) {\n    return document.querySelector(\"link[href*=\\\"\".concat(url, \"\\\"]\"));\n  }\n  function getCssUrl(urlOrVersion) {\n    return !urlOrVersion || parseVersion(urlOrVersion)\n    // if it's a valid version string return the CDN URL\n    ? getCdnCssUrl(urlOrVersion)\n    // otherwise assume it's a URL and return that\n    : urlOrVersion;\n  }\n  // lazy load the CSS needed for the ArcGIS API\n  function loadCss(urlOrVersion, before) {\n    var url = getCssUrl(urlOrVersion);\n    var link = getCss(url);\n    if (!link) {\n      // create & load the css link\n      link = createStylesheetLink(url);\n      insertLink(link, before);\n    }\n    return link;\n  }\n\n  /* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  var defaultOptions = {};\n  function createScript(url) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n    script.setAttribute('data-esri-loader', 'loading');\n    return script;\n  }\n  // add a one-time load handler to script\n  // and optionally add a one time error handler as well\n  function handleScriptLoad(script, callback, errback) {\n    var onScriptError;\n    if (errback) {\n      // set up an error handler as well\n      onScriptError = handleScriptError(script, errback);\n    }\n    var onScriptLoad = function () {\n      // pass the script to the callback\n      callback(script);\n      // remove this event listener\n      script.removeEventListener('load', onScriptLoad, false);\n      if (onScriptError) {\n        // remove the error listener as well\n        script.removeEventListener('error', onScriptError, false);\n      }\n    };\n    script.addEventListener('load', onScriptLoad, false);\n  }\n  // add a one-time error handler to the script\n  function handleScriptError(script, callback) {\n    var onScriptError = function (e) {\n      // reject the promise and remove this event listener\n      callback(e.error || new Error(\"There was an error attempting to load \".concat(script.src)));\n      // remove this event listener\n      script.removeEventListener('error', onScriptError, false);\n    };\n    script.addEventListener('error', onScriptError, false);\n    return onScriptError;\n  }\n  // allow the user to configure default script options rather than passing options to `loadModules` each time\n  function setDefaultOptions(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    defaultOptions = options;\n  }\n  // get the script injected by this library\n  function getScript() {\n    return document.querySelector('script[data-esri-loader]');\n  }\n  // has ArcGIS API been loaded on the page yet?\n  function isLoaded() {\n    var globalRequire = window['require'];\n    // .on() ensures that it's Dojo's AMD loader\n    return globalRequire && globalRequire.on;\n  }\n  // load the ArcGIS API on the page\n  function loadScript(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    // we would have liked to use spread like { ...defaultOptions, ...options }\n    // but TS would inject a polyfill that would require use to configure rollup w content: 'window'\n    // if we have another occasion to use spread, let's do that and replace this for...in\n    var opts = {};\n    [defaultOptions, options].forEach(function (obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          opts[prop] = obj[prop];\n        }\n      }\n    });\n    // URL to load\n    var version = opts.version;\n    var url = opts.url || getCdnUrl(version);\n    return new utils.Promise(function (resolve, reject) {\n      var script = getScript();\n      if (script) {\n        // the API is already loaded or in the process of loading...\n        // NOTE: have to test against scr attribute value, not script.src\n        // b/c the latter will return the full url for relative paths\n        var src = script.getAttribute('src');\n        if (src !== url) {\n          // potentially trying to load a different version of the API\n          reject(new Error(\"The ArcGIS API for JavaScript is already loaded (\".concat(src, \").\")));\n        } else {\n          if (isLoaded()) {\n            // the script has already successfully loaded\n            resolve(script);\n          } else {\n            // wait for the script to load and then resolve\n            handleScriptLoad(script, resolve, reject);\n          }\n        }\n      } else {\n        if (isLoaded()) {\n          // the API has been loaded by some other means\n          // potentially trying to load a different version of the API\n          reject(new Error(\"The ArcGIS API for JavaScript is already loaded.\"));\n        } else {\n          // this is the first time attempting to load the API\n          var css = opts.css;\n          if (css) {\n            var useVersion = css === true;\n            // load the css before loading the script\n            loadCss(useVersion ? version : css, opts.insertCssBefore);\n          }\n          // create a script object whose source points to the API\n          script = createScript(url);\n          // _currentUrl = url;\n          // once the script is loaded...\n          handleScriptLoad(script, function () {\n            // update the status of the script\n            script.setAttribute('data-esri-loader', 'loaded');\n            // return the script\n            resolve(script);\n          }, reject);\n          // load the script\n          document.body.appendChild(script);\n        }\n      }\n    });\n  }\n\n  /* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n   * Apache-2.0 */\n  // wrap Dojo's require() in a promise\n  function requireModules(modules) {\n    return new utils.Promise(function (resolve, reject) {\n      // If something goes wrong loading the esri/dojo scripts, reject with the error.\n      var errorHandler = window['require'].on('error', reject);\n      window['require'](modules, function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        // remove error handler\n        errorHandler.remove();\n        // Resolve with the parameters from dojo require as an array.\n        resolve(args);\n      });\n    });\n  }\n  // returns a promise that resolves with an array of the required modules\n  // also will attempt to lazy load the ArcGIS API if it has not already been loaded\n  function loadModules(modules, loadScriptOptions) {\n    if (loadScriptOptions === void 0) {\n      loadScriptOptions = {};\n    }\n    if (!isLoaded()) {\n      // script is not yet loaded, is it in the process of loading?\n      var script = getScript();\n      var src = script && script.getAttribute('src');\n      if (!loadScriptOptions.url && src) {\n        // script is still loading and user did not specify a URL\n        // in this case we want to default to the URL that's being loaded\n        // instead of defaulting to the latest 4.x URL\n        loadScriptOptions.url = src;\n      }\n      // attempt to load the script then load the modules\n      return loadScript(loadScriptOptions).then(function () {\n        return requireModules(modules);\n      });\n    } else {\n      // script is already loaded, just load the modules\n      return requireModules(modules);\n    }\n  }\n\n  /*\n    Copyright (c) 2022 Esri\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n  */\n  // re-export the functions that are part of the public API\n\n  exports.utils = utils;\n  exports.loadModules = loadModules;\n  exports.getScript = getScript;\n  exports.isLoaded = isLoaded;\n  exports.loadScript = loadScript;\n  exports.setDefaultOptions = setDefaultOptions;\n  exports.loadCss = loadCss;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgwLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0VBQUE7O0VBRUEsSUFBSUEsU0FBUyxHQUFHLE9BQU9DLE1BQU0sS0FBSyxXQUFXOztFQUU3QyxJQUFBQyxLQUFBLEdBQWU7SUFDWEMsT0FBTyxFQUFFSCxTQUFTLEdBQUdDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBR0c7R0FDNUM7O0VDTkQ7O0VBRUEsSUFBSUMsZUFBZSxHQUFHLE1BQU07RUFDNUIsSUFBSUMsSUFBSSxHQUFHLE1BQU07RUFDakIsU0FBZ0JDLFlBQVlBLENBQUNDLE9BQU8sRUFBRTtJQUNsQyxJQUFJQSxPQUFPLENBQUNDLFdBQVcsRUFBRSxLQUFLSCxJQUFJLEVBQUU7TUFDaEMsT0FBT0EsSUFBSTs7SUFFZixJQUFJSSxLQUFLLEdBQUdGLE9BQU8sSUFBSUEsT0FBTyxDQUFDRSxLQUFLLENBQUMsY0FBYyxDQUFDO0lBQ3BELE9BQU9BLEtBQUssSUFBSTtNQUNaQyxLQUFLLEVBQUVDLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztNQUM3QkcsS0FBSyxFQUFFRCxRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0tBQy9COzs7Ozs7O0VBT0wsU0FBZ0JJLFNBQVNBLENBQUNOLE9BQU8sRUFBRTtJQUMvQixJQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7TUFBRUEsT0FBTyxHQUFHSCxlQUFlO0lBQUM7SUFDcEQsT0FBTyx3QkFBd0IsQ0FBQ1UsTUFBTSxDQUFDUCxPQUFPLEVBQUUsR0FBRyxDQUFDOzs7Ozs7O0VBT3hELFNBQWdCUSxZQUFZQSxDQUFDUixPQUFPLEVBQUU7SUFDbEMsSUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO01BQUVBLE9BQU8sR0FBR0gsZUFBZTtJQUFDO0lBQ3BELElBQUlZLE9BQU8sR0FBR0gsU0FBUyxDQUFDTixPQUFPLENBQUM7SUFDaEMsSUFBSVUsYUFBYSxHQUFHWCxZQUFZLENBQUNDLE9BQU8sQ0FBQztJQUN6QyxJQUFJVSxhQUFhLEtBQUtaLElBQUksSUFBSVksYUFBYSxDQUFDUCxLQUFLLEtBQUssQ0FBQyxFQUFFOztNQUVyRCxJQUFJUSxJQUFJLEdBQUdELGFBQWEsQ0FBQ0wsS0FBSyxJQUFJLEVBQUUsR0FBRyxLQUFLLEdBQUcsRUFBRTtNQUNqRCxPQUFPLEVBQUUsQ0FBQ0UsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0YsTUFBTSxDQUFDSSxJQUFJLEVBQUUsbUJBQW1CLENBQUM7S0FDOUQsTUFDSTs7TUFFRCxPQUFPLEVBQUUsQ0FBQ0osTUFBTSxDQUFDRSxPQUFPLEVBQUUsNEJBQTRCLENBQUM7Ozs7RUN2Qy9EOztFQUVBLFNBQ1NHLG9CQUFvQkEsQ0FBQ0MsSUFBSSxFQUFFO0lBQ2hDLElBQUlDLElBQUksR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsTUFBTSxDQUFDO0lBQ3pDRixJQUFJLENBQUNHLEdBQUcsR0FBRyxZQUFZO0lBQ3ZCSCxJQUFJLENBQUNELElBQUksR0FBR0EsSUFBSTtJQUNoQixPQUFPQyxJQUFJOztFQUVmLFNBQVNJLFVBQVVBLENBQUNKLElBQUksRUFBRUssTUFBTSxFQUFFO0lBQzlCLElBQUlBLE1BQU0sRUFBRTs7TUFFUixJQUFJQyxVQUFVLEdBQUdMLFFBQVEsQ0FBQ00sYUFBYSxDQUFDRixNQUFNLENBQUM7TUFDL0NDLFVBQVUsQ0FBQ0UsVUFBVSxDQUFDQyxZQUFZLENBQUNULElBQUksRUFBRU0sVUFBVSxDQUFDO0tBQ3ZELE1BQ0k7O01BRURMLFFBQVEsQ0FBQ1MsSUFBSSxDQUFDQyxXQUFXLENBQUNYLElBQUksQ0FBQzs7OztFQUl2QyxTQUFTWSxNQUFNQSxDQUFDQyxHQUFHLEVBQUU7SUFDakIsT0FBT1osUUFBUSxDQUFDTSxhQUFhLENBQUMsZUFBZSxDQUFDZCxNQUFNLENBQUNvQixHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7O0VBRXJFLFNBQVNDLFNBQVNBLENBQUNDLFlBQVksRUFBRTtJQUM3QixPQUFPLENBQUNBLFlBQVksSUFBSTlCLFlBQVksQ0FBQzhCLFlBQVk7O01BRTNDckIsWUFBWSxDQUFDcUIsWUFBWTs7TUFFekJBLFlBQVk7OztFQUd0QixTQUFnQkMsT0FBT0EsQ0FBQ0QsWUFBWSxFQUFFVixNQUFNLEVBQUU7SUFDMUMsSUFBSVEsR0FBRyxHQUFHQyxTQUFTLENBQUNDLFlBQVksQ0FBQztJQUNqQyxJQUFJZixJQUFJLEdBQUdZLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDO0lBQ3RCLElBQUksQ0FBQ2IsSUFBSSxFQUFFOztNQUVQQSxJQUFJLEdBQUdGLG9CQUFvQixDQUFDZSxHQUFHLENBQUM7TUFDaENULFVBQVUsQ0FBQ0osSUFBSSxFQUFFSyxNQUFNLENBQUM7O0lBRTVCLE9BQU9MLElBQUk7OztFQ3hDZjs7RUFFQSxJQUdJaUIsY0FBYyxHQUFHLEVBQUU7RUFDdkIsU0FBU0MsWUFBWUEsQ0FBQ0wsR0FBRyxFQUFFO0lBQ3ZCLElBQUlNLE1BQU0sR0FBR2xCLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUM3Q2lCLE1BQU0sQ0FBQ0MsSUFBSSxHQUFHLGlCQUFpQjtJQUMvQkQsTUFBTSxDQUFDRSxHQUFHLEdBQUdSLEdBQUc7SUFDaEJNLE1BQU0sQ0FBQ0csWUFBWSxDQUFDLGtCQUFrQixFQUFFLFNBQVMsQ0FBQztJQUNsRCxPQUFPSCxNQUFNOzs7O0VBSWpCLFNBQVNJLGdCQUFnQkEsQ0FBQ0osTUFBTSxFQUFFSyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtJQUNqRCxJQUFJQyxhQUFhO0lBQ2pCLElBQUlELE9BQU8sRUFBRTs7TUFFVEMsYUFBYSxHQUFHQyxpQkFBaUIsQ0FBQ1IsTUFBTSxFQUFFTSxPQUFPLENBQUM7O0lBRXRELElBQUlHLFlBQVksR0FBRyxTQUFBQSxDQUFBLEVBQVk7O01BRTNCSixRQUFRLENBQUNMLE1BQU0sQ0FBQzs7TUFFaEJBLE1BQU0sQ0FBQ1UsbUJBQW1CLENBQUMsTUFBTSxFQUFFRCxZQUFZLEVBQUUsS0FBSyxDQUFDO01BQ3ZELElBQUlGLGFBQWEsRUFBRTs7UUFFZlAsTUFBTSxDQUFDVSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUVILGFBQWEsRUFBRSxLQUFLLENBQUM7O0tBRWhFO0lBQ0RQLE1BQU0sQ0FBQ1csZ0JBQWdCLENBQUMsTUFBTSxFQUFFRixZQUFZLEVBQUUsS0FBSyxDQUFDOzs7RUFHeEQsU0FBU0QsaUJBQWlCQSxDQUFDUixNQUFNLEVBQUVLLFFBQVEsRUFBRTtJQUN6QyxJQUFJRSxhQUFhLEdBQUcsU0FBQUEsQ0FBVUssQ0FBQyxFQUFFOztNQUU3QlAsUUFBUSxDQUFDTyxDQUFDLENBQUNDLEtBQUssSUFBSSxJQUFJQyxLQUFLLENBQUMsd0NBQXdDLENBQUN4QyxNQUFNLENBQUMwQixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUM7O01BRTNGRixNQUFNLENBQUNVLG1CQUFtQixDQUFDLE9BQU8sRUFBRUgsYUFBYSxFQUFFLEtBQUssQ0FBQztLQUM1RDtJQUNEUCxNQUFNLENBQUNXLGdCQUFnQixDQUFDLE9BQU8sRUFBRUosYUFBYSxFQUFFLEtBQUssQ0FBQztJQUN0RCxPQUFPQSxhQUFhOzs7RUFHeEIsU0FBZ0JRLGlCQUFpQkEsQ0FBQ0MsT0FBTyxFQUFFO0lBQ3ZDLElBQUlBLE9BQU8sS0FBSyxLQUFLLENBQUMsRUFBRTtNQUFFQSxPQUFPLEdBQUcsRUFBRTtJQUFDO0lBQ3ZDbEIsY0FBYyxHQUFHa0IsT0FBTzs7O0VBRzVCLFNBQWdCQyxTQUFTQSxDQUFBLEVBQUc7SUFDeEIsT0FBT25DLFFBQVEsQ0FBQ00sYUFBYSxDQUFDLDBCQUEwQixDQUFDOzs7RUFHN0QsU0FBZ0I4QixRQUFRQSxDQUFBLEVBQUc7SUFDdkIsSUFBSUMsYUFBYSxHQUFHM0QsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7SUFFckMsT0FBTzJELGFBQWEsSUFBSUEsYUFBYSxDQUFDQyxFQUFFOzs7RUFHNUMsU0FBZ0JDLFVBQVVBLENBQUNMLE9BQU8sRUFBRTtJQUNoQyxJQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7TUFBRUEsT0FBTyxHQUFHLEVBQUU7SUFBQzs7OztJQUl2QyxJQUFJTSxJQUFJLEdBQUcsRUFBRTtJQUNiLENBQUN4QixjQUFjLEVBQUVrQixPQUFPLENBQUMsQ0FBQ08sT0FBTyxDQUFDLFVBQVVDLEdBQUcsRUFBRTtNQUM3QyxLQUFLLElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUFFO1FBQ2xCLElBQUlFLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0wsR0FBRyxFQUFFQyxJQUFJLENBQUMsRUFBRTtVQUNqREgsSUFBSSxDQUFDRyxJQUFJLENBQUMsR0FBR0QsR0FBRyxDQUFDQyxJQUFJLENBQUM7OztLQUdqQyxDQUFDOztJQUVGLElBQUkxRCxPQUFPLEdBQUd1RCxJQUFJLENBQUN2RCxPQUFPO0lBQzFCLElBQUkyQixHQUFHLEdBQUc0QixJQUFJLENBQUM1QixHQUFHLElBQUlyQixTQUFTLENBQUNOLE9BQU8sQ0FBQztJQUN4QyxPQUFPLElBQUlOLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLFVBQVVvRSxPQUFPLEVBQUVDLE1BQU0sRUFBRTtNQUNoRCxJQUFJL0IsTUFBTSxHQUFHaUIsU0FBUyxFQUFFO01BQ3hCLElBQUlqQixNQUFNLEVBQUU7Ozs7UUFJUixJQUFJRSxHQUFHLEdBQUdGLE1BQU0sQ0FBQ2dDLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFDcEMsSUFBSTlCLEdBQUcsS0FBS1IsR0FBRyxFQUFFOztVQUVicUMsTUFBTSxDQUFDLElBQUlqQixLQUFLLENBQUMsbURBQW1ELENBQUN4QyxNQUFNLENBQUM0QixHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMzRixNQUNJO1VBQ0QsSUFBSWdCLFFBQVEsRUFBRSxFQUFFOztZQUVaWSxPQUFPLENBQUM5QixNQUFNLENBQUM7V0FDbEIsTUFDSTs7WUFFREksZ0JBQWdCLENBQUNKLE1BQU0sRUFBRThCLE9BQU8sRUFBRUMsTUFBTSxDQUFDOzs7T0FHcEQsTUFDSTtRQUNELElBQUliLFFBQVEsRUFBRSxFQUFFOzs7VUFHWmEsTUFBTSxDQUFDLElBQUlqQixLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN4RSxNQUNJOztVQUVELElBQUltQixHQUFHLEdBQUdYLElBQUksQ0FBQ1csR0FBRztVQUNsQixJQUFJQSxHQUFHLEVBQUU7WUFDTCxJQUFJQyxVQUFVLEdBQUdELEdBQUcsS0FBSyxJQUFJOztZQUU3QnBDLE9BQU8sQ0FBQ3FDLFVBQVUsR0FBR25FLE9BQU8sR0FBR2tFLEdBQUcsRUFBRVgsSUFBSSxDQUFDYSxlQUFlLENBQUM7OztVQUc3RG5DLE1BQU0sR0FBR0QsWUFBWSxDQUFDTCxHQUFHLENBQUM7OztVQUcxQlUsZ0JBQWdCLENBQUNKLE1BQU0sRUFBRSxZQUFZOztZQUVqQ0EsTUFBTSxDQUFDRyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDOztZQUVqRDJCLE9BQU8sQ0FBQzlCLE1BQU0sQ0FBQztXQUNsQixFQUFFK0IsTUFBTSxDQUFDOztVQUVWakQsUUFBUSxDQUFDc0QsSUFBSSxDQUFDNUMsV0FBVyxDQUFDUSxNQUFNLENBQUM7OztLQUc1QyxDQUFDOzs7RUM5SE47O0VBRUE7RUFHQSxTQUFTcUMsY0FBY0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQzdCLE9BQU8sSUFBSTdFLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLFVBQVVvRSxPQUFPLEVBQUVDLE1BQU0sRUFBRTs7TUFFaEQsSUFBSVEsWUFBWSxHQUFHL0UsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDNEQsRUFBRSxDQUFDLE9BQU8sRUFBRVcsTUFBTSxDQUFDO01BQ3hEdkUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDOEUsT0FBTyxFQUFFLFlBQVk7UUFDbkMsSUFBSUUsSUFBSSxHQUFHLEVBQUU7UUFDYixLQUFLLElBQUlDLEVBQUUsR0FBRyxDQUFDLEVBQUVBLEVBQUUsR0FBR0MsU0FBUyxDQUFDQyxNQUFNLEVBQUVGLEVBQUUsRUFBRSxFQUFFO1VBQzFDRCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxHQUFHQyxTQUFTLENBQUNELEVBQUUsQ0FBQzs7O1FBRzVCRixZQUFZLENBQUNLLE1BQU0sRUFBRTs7UUFFckJkLE9BQU8sQ0FBQ1UsSUFBSSxDQUFDO09BQ2hCLENBQUM7S0FDTCxDQUFDOzs7O0VBSU4sU0FBZ0JLLFdBQVdBLENBQUNQLE9BQU8sRUFBRVEsaUJBQWlCLEVBQUU7SUFDcEQsSUFBSUEsaUJBQWlCLEtBQUssS0FBSyxDQUFDLEVBQUU7TUFBRUEsaUJBQWlCLEdBQUcsRUFBRTtJQUFDO0lBQzNELElBQUksQ0FBQzVCLFFBQVEsRUFBRSxFQUFFOztNQUViLElBQUlsQixNQUFNLEdBQUdpQixTQUFTLEVBQUU7TUFDeEIsSUFBSWYsR0FBRyxHQUFHRixNQUFNLElBQUlBLE1BQU0sQ0FBQ2dDLFlBQVksQ0FBQyxLQUFLLENBQUM7TUFDOUMsSUFBSSxDQUFDYyxpQkFBaUIsQ0FBQ3BELEdBQUcsSUFBSVEsR0FBRyxFQUFFOzs7O1FBSS9CNEMsaUJBQWlCLENBQUNwRCxHQUFHLEdBQUdRLEdBQUc7OztNQUcvQixPQUFPbUIsVUFBVSxDQUFDeUIsaUJBQWlCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFlBQVk7UUFBRSxPQUFPVixjQUFjLENBQUNDLE9BQU8sQ0FBQztNQUFDLENBQUUsQ0FBQztLQUM3RixNQUNJOztNQUVELE9BQU9ELGNBQWMsQ0FBQ0MsT0FBTyxDQUFDOzs7O0VDeEN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL0Rlc2lnbiBXaW5kIFNwZWVkcy8uLi9lc20vdXRpbHMvaW5kZXguanM/M2ViZSIsIndlYnBhY2s6Ly9EZXNpZ24gV2luZCBTcGVlZHMvLi4vZXNtL3V0aWxzL3VybC5qcz84ZmMwIiwid2VicGFjazovL0Rlc2lnbiBXaW5kIFNwZWVkcy8uLi9lc20vdXRpbHMvY3NzLmpzPzJhYzkiLCJ3ZWJwYWNrOi8vRGVzaWduIFdpbmQgU3BlZWRzLy4uL2VzbS9zY3JpcHQuanM/OTllOSIsIndlYnBhY2s6Ly9EZXNpZ24gV2luZCBTcGVlZHMvLi4vZXNtL21vZHVsZXMuanM/NzNhNyIsIndlYnBhY2s6Ly9EZXNpZ24gV2luZCBTcGVlZHMvLi4vZXNtL2VzcmktbG9hZGVyLmpzP2JhYjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDIyIEVudmlyb25tZW50YWwgU3lzdGVtcyBSZXNlYXJjaCBJbnN0aXR1dGUsIEluYy5cbiAqIEFwYWNoZS0yLjAgKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbi8vIGFsbG93IGNvbnN1bWluZyBsaWJyYXJpZXMgdG8gcHJvdmlkZSB0aGVpciBvd24gUHJvbWlzZSBpbXBsZW1lbnRhdGlvbnNcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBQcm9taXNlOiBpc0Jyb3dzZXIgPyB3aW5kb3dbJ1Byb21pc2UnXSA6IHVuZGVmaW5lZFxufTtcbiIsIi8qIENvcHlyaWdodCAoYykgMjAyMiBFbnZpcm9ubWVudGFsIFN5c3RlbXMgUmVzZWFyY2ggSW5zdGl0dXRlLCBJbmMuXG4gKiBBcGFjaGUtMi4wICovXG52YXIgREVGQVVMVF9WRVJTSU9OID0gJzQuMjUnO1xudmFyIE5FWFQgPSAnbmV4dCc7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VWZXJzaW9uKHZlcnNpb24pIHtcbiAgICBpZiAodmVyc2lvbi50b0xvd2VyQ2FzZSgpID09PSBORVhUKSB7XG4gICAgICAgIHJldHVybiBORVhUO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSB2ZXJzaW9uICYmIHZlcnNpb24ubWF0Y2goL14oXFxkKVxcLihcXGQrKS8pO1xuICAgIHJldHVybiBtYXRjaCAmJiB7XG4gICAgICAgIG1ham9yOiBwYXJzZUludChtYXRjaFsxXSwgMTApLFxuICAgICAgICBtaW5vcjogcGFyc2VJbnQobWF0Y2hbMl0sIDEwKVxuICAgIH07XG59XG4vKipcbiAqIEdldCB0aGUgQ0ROIHVybCBmb3IgYSBnaXZlbiB2ZXJzaW9uXG4gKlxuICogQHBhcmFtIHZlcnNpb24gRXg6ICc0LjI1JyBvciAnMy40MicuIERlZmF1bHRzIHRvIHRoZSBsYXRlc3QgNC54IHZlcnNpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDZG5VcmwodmVyc2lvbikge1xuICAgIGlmICh2ZXJzaW9uID09PSB2b2lkIDApIHsgdmVyc2lvbiA9IERFRkFVTFRfVkVSU0lPTjsgfVxuICAgIHJldHVybiBcImh0dHBzOi8vanMuYXJjZ2lzLmNvbS9cIi5jb25jYXQodmVyc2lvbiwgXCIvXCIpO1xufVxuLyoqXG4gKiBHZXQgdGhlIENETiB1cmwgZm9yIGEgdGhlIENTUyBmb3IgYSBnaXZlbiB2ZXJzaW9uIGFuZC9vciB0aGVtZVxuICpcbiAqIEBwYXJhbSB2ZXJzaW9uIEV4OiAnNC4yNScsICczLjQyJywgb3IgJ25leHQnLiBEZWZhdWx0cyB0byB0aGUgbGF0ZXN0IDQueCB2ZXJzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2RuQ3NzVXJsKHZlcnNpb24pIHtcbiAgICBpZiAodmVyc2lvbiA9PT0gdm9pZCAwKSB7IHZlcnNpb24gPSBERUZBVUxUX1ZFUlNJT047IH1cbiAgICB2YXIgYmFzZVVybCA9IGdldENkblVybCh2ZXJzaW9uKTtcbiAgICB2YXIgcGFyc2VkVmVyc2lvbiA9IHBhcnNlVmVyc2lvbih2ZXJzaW9uKTtcbiAgICBpZiAocGFyc2VkVmVyc2lvbiAhPT0gTkVYVCAmJiBwYXJzZWRWZXJzaW9uLm1ham9yID09PSAzKSB7XG4gICAgICAgIC8vIE5PVEU6IGF0IDMuMTEgdGhlIENTUyBtb3ZlZCBmcm9tIHRoZSAvanMgZm9sZGVyIHRvIHRoZSByb290XG4gICAgICAgIHZhciBwYXRoID0gcGFyc2VkVmVyc2lvbi5taW5vciA8PSAxMCA/ICdqcy8nIDogJyc7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChiYXNlVXJsKS5jb25jYXQocGF0aCwgXCJlc3JpL2Nzcy9lc3JpLmNzc1wiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGFzc3VtZSA0LnhcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGJhc2VVcmwsIFwiZXNyaS90aGVtZXMvbGlnaHQvbWFpbi5jc3NcIik7XG4gICAgfVxufVxuIiwiLyogQ29weXJpZ2h0IChjKSAyMDIyIEVudmlyb25tZW50YWwgU3lzdGVtcyBSZXNlYXJjaCBJbnN0aXR1dGUsIEluYy5cbiAqIEFwYWNoZS0yLjAgKi9cbmltcG9ydCB7IGdldENkbkNzc1VybCwgcGFyc2VWZXJzaW9uIH0gZnJvbSAnLi91cmwnO1xuZnVuY3Rpb24gY3JlYXRlU3R5bGVzaGVldExpbmsoaHJlZikge1xuICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgIGxpbmsuaHJlZiA9IGhyZWY7XG4gICAgcmV0dXJuIGxpbms7XG59XG5mdW5jdGlvbiBpbnNlcnRMaW5rKGxpbmssIGJlZm9yZSkge1xuICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgLy8gdGhlIGxpbmsgc2hvdWxkIGJlIGluc2VydGVkIGJlZm9yZSBhIHNwZWNpZmljIG5vZGVcbiAgICAgICAgdmFyIGJlZm9yZU5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJlZm9yZSk7XG4gICAgICAgIGJlZm9yZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGluaywgYmVmb3JlTm9kZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGxpbmsgdG8gdGhlbiBlbmQgb2YgdGhlIGhlYWQgdGFnXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgfVxufVxuLy8gY2hlY2sgaWYgdGhlIGNzcyB1cmwgaGFzIGJlZW4gaW5qZWN0ZWQgb3IgYWRkZWQgbWFudWFsbHlcbmZ1bmN0aW9uIGdldENzcyh1cmwpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImxpbmtbaHJlZio9XFxcIlwiLmNvbmNhdCh1cmwsIFwiXFxcIl1cIikpO1xufVxuZnVuY3Rpb24gZ2V0Q3NzVXJsKHVybE9yVmVyc2lvbikge1xuICAgIHJldHVybiAhdXJsT3JWZXJzaW9uIHx8IHBhcnNlVmVyc2lvbih1cmxPclZlcnNpb24pXG4gICAgICAgIC8vIGlmIGl0J3MgYSB2YWxpZCB2ZXJzaW9uIHN0cmluZyByZXR1cm4gdGhlIENETiBVUkxcbiAgICAgICAgPyBnZXRDZG5Dc3NVcmwodXJsT3JWZXJzaW9uKVxuICAgICAgICAvLyBvdGhlcndpc2UgYXNzdW1lIGl0J3MgYSBVUkwgYW5kIHJldHVybiB0aGF0XG4gICAgICAgIDogdXJsT3JWZXJzaW9uO1xufVxuLy8gbGF6eSBsb2FkIHRoZSBDU1MgbmVlZGVkIGZvciB0aGUgQXJjR0lTIEFQSVxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRDc3ModXJsT3JWZXJzaW9uLCBiZWZvcmUpIHtcbiAgICB2YXIgdXJsID0gZ2V0Q3NzVXJsKHVybE9yVmVyc2lvbik7XG4gICAgdmFyIGxpbmsgPSBnZXRDc3ModXJsKTtcbiAgICBpZiAoIWxpbmspIHtcbiAgICAgICAgLy8gY3JlYXRlICYgbG9hZCB0aGUgY3NzIGxpbmtcbiAgICAgICAgbGluayA9IGNyZWF0ZVN0eWxlc2hlZXRMaW5rKHVybCk7XG4gICAgICAgIGluc2VydExpbmsobGluaywgYmVmb3JlKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbms7XG59XG4iLCIvKiBDb3B5cmlnaHQgKGMpIDIwMjIgRW52aXJvbm1lbnRhbCBTeXN0ZW1zIFJlc2VhcmNoIEluc3RpdHV0ZSwgSW5jLlxuICogQXBhY2hlLTIuMCAqL1xuaW1wb3J0IHsgbG9hZENzcyB9IGZyb20gJy4vdXRpbHMvY3NzJztcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzL2luZGV4JztcbmltcG9ydCB7IGdldENkblVybCB9IGZyb20gJy4vdXRpbHMvdXJsJztcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZnVuY3Rpb24gY3JlYXRlU2NyaXB0KHVybCkge1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnZGF0YS1lc3JpLWxvYWRlcicsICdsb2FkaW5nJyk7XG4gICAgcmV0dXJuIHNjcmlwdDtcbn1cbi8vIGFkZCBhIG9uZS10aW1lIGxvYWQgaGFuZGxlciB0byBzY3JpcHRcbi8vIGFuZCBvcHRpb25hbGx5IGFkZCBhIG9uZSB0aW1lIGVycm9yIGhhbmRsZXIgYXMgd2VsbFxuZnVuY3Rpb24gaGFuZGxlU2NyaXB0TG9hZChzY3JpcHQsIGNhbGxiYWNrLCBlcnJiYWNrKSB7XG4gICAgdmFyIG9uU2NyaXB0RXJyb3I7XG4gICAgaWYgKGVycmJhY2spIHtcbiAgICAgICAgLy8gc2V0IHVwIGFuIGVycm9yIGhhbmRsZXIgYXMgd2VsbFxuICAgICAgICBvblNjcmlwdEVycm9yID0gaGFuZGxlU2NyaXB0RXJyb3Ioc2NyaXB0LCBlcnJiYWNrKTtcbiAgICB9XG4gICAgdmFyIG9uU2NyaXB0TG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gcGFzcyB0aGUgc2NyaXB0IHRvIHRoZSBjYWxsYmFja1xuICAgICAgICBjYWxsYmFjayhzY3JpcHQpO1xuICAgICAgICAvLyByZW1vdmUgdGhpcyBldmVudCBsaXN0ZW5lclxuICAgICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uU2NyaXB0TG9hZCwgZmFsc2UpO1xuICAgICAgICBpZiAob25TY3JpcHRFcnJvcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBlcnJvciBsaXN0ZW5lciBhcyB3ZWxsXG4gICAgICAgICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvblNjcmlwdEVycm9yLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25TY3JpcHRMb2FkLCBmYWxzZSk7XG59XG4vLyBhZGQgYSBvbmUtdGltZSBlcnJvciBoYW5kbGVyIHRvIHRoZSBzY3JpcHRcbmZ1bmN0aW9uIGhhbmRsZVNjcmlwdEVycm9yKHNjcmlwdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgb25TY3JpcHRFcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIC8vIHJlamVjdCB0aGUgcHJvbWlzZSBhbmQgcmVtb3ZlIHRoaXMgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgY2FsbGJhY2soZS5lcnJvciB8fCBuZXcgRXJyb3IoXCJUaGVyZSB3YXMgYW4gZXJyb3IgYXR0ZW1wdGluZyB0byBsb2FkIFwiLmNvbmNhdChzY3JpcHQuc3JjKSkpO1xuICAgICAgICAvLyByZW1vdmUgdGhpcyBldmVudCBsaXN0ZW5lclxuICAgICAgICBzY3JpcHQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvblNjcmlwdEVycm9yLCBmYWxzZSk7XG4gICAgfTtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvblNjcmlwdEVycm9yLCBmYWxzZSk7XG4gICAgcmV0dXJuIG9uU2NyaXB0RXJyb3I7XG59XG4vLyBhbGxvdyB0aGUgdXNlciB0byBjb25maWd1cmUgZGVmYXVsdCBzY3JpcHQgb3B0aW9ucyByYXRoZXIgdGhhbiBwYXNzaW5nIG9wdGlvbnMgdG8gYGxvYWRNb2R1bGVzYCBlYWNoIHRpbWVcbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG59XG4vLyBnZXQgdGhlIHNjcmlwdCBpbmplY3RlZCBieSB0aGlzIGxpYnJhcnlcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JpcHQoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtkYXRhLWVzcmktbG9hZGVyXScpO1xufVxuLy8gaGFzIEFyY0dJUyBBUEkgYmVlbiBsb2FkZWQgb24gdGhlIHBhZ2UgeWV0P1xuZXhwb3J0IGZ1bmN0aW9uIGlzTG9hZGVkKCkge1xuICAgIHZhciBnbG9iYWxSZXF1aXJlID0gd2luZG93WydyZXF1aXJlJ107XG4gICAgLy8gLm9uKCkgZW5zdXJlcyB0aGF0IGl0J3MgRG9qbydzIEFNRCBsb2FkZXJcbiAgICByZXR1cm4gZ2xvYmFsUmVxdWlyZSAmJiBnbG9iYWxSZXF1aXJlLm9uO1xufVxuLy8gbG9hZCB0aGUgQXJjR0lTIEFQSSBvbiB0aGUgcGFnZVxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTY3JpcHQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgLy8gd2Ugd291bGQgaGF2ZSBsaWtlZCB0byB1c2Ugc3ByZWFkIGxpa2UgeyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9XG4gICAgLy8gYnV0IFRTIHdvdWxkIGluamVjdCBhIHBvbHlmaWxsIHRoYXQgd291bGQgcmVxdWlyZSB1c2UgdG8gY29uZmlndXJlIHJvbGx1cCB3IGNvbnRlbnQ6ICd3aW5kb3cnXG4gICAgLy8gaWYgd2UgaGF2ZSBhbm90aGVyIG9jY2FzaW9uIHRvIHVzZSBzcHJlYWQsIGxldCdzIGRvIHRoYXQgYW5kIHJlcGxhY2UgdGhpcyBmb3IuLi5pblxuICAgIHZhciBvcHRzID0ge307XG4gICAgW2RlZmF1bHRPcHRpb25zLCBvcHRpb25zXS5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG9wdHNbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBVUkwgdG8gbG9hZFxuICAgIHZhciB2ZXJzaW9uID0gb3B0cy52ZXJzaW9uO1xuICAgIHZhciB1cmwgPSBvcHRzLnVybCB8fCBnZXRDZG5VcmwodmVyc2lvbik7XG4gICAgcmV0dXJuIG5ldyB1dGlscy5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIHNjcmlwdCA9IGdldFNjcmlwdCgpO1xuICAgICAgICBpZiAoc2NyaXB0KSB7XG4gICAgICAgICAgICAvLyB0aGUgQVBJIGlzIGFscmVhZHkgbG9hZGVkIG9yIGluIHRoZSBwcm9jZXNzIG9mIGxvYWRpbmcuLi5cbiAgICAgICAgICAgIC8vIE5PVEU6IGhhdmUgdG8gdGVzdCBhZ2FpbnN0IHNjciBhdHRyaWJ1dGUgdmFsdWUsIG5vdCBzY3JpcHQuc3JjXG4gICAgICAgICAgICAvLyBiL2MgdGhlIGxhdHRlciB3aWxsIHJldHVybiB0aGUgZnVsbCB1cmwgZm9yIHJlbGF0aXZlIHBhdGhzXG4gICAgICAgICAgICB2YXIgc3JjID0gc2NyaXB0LmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgICAgICBpZiAoc3JjICE9PSB1cmwpIHtcbiAgICAgICAgICAgICAgICAvLyBwb3RlbnRpYWxseSB0cnlpbmcgdG8gbG9hZCBhIGRpZmZlcmVudCB2ZXJzaW9uIG9mIHRoZSBBUElcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVGhlIEFyY0dJUyBBUEkgZm9yIEphdmFTY3JpcHQgaXMgYWxyZWFkeSBsb2FkZWQgKFwiLmNvbmNhdChzcmMsIFwiKS5cIikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpc0xvYWRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzY3JpcHQgaGFzIGFscmVhZHkgc3VjY2Vzc2Z1bGx5IGxvYWRlZFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB3YWl0IGZvciB0aGUgc2NyaXB0IHRvIGxvYWQgYW5kIHRoZW4gcmVzb2x2ZVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVTY3JpcHRMb2FkKHNjcmlwdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNMb2FkZWQoKSkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBBUEkgaGFzIGJlZW4gbG9hZGVkIGJ5IHNvbWUgb3RoZXIgbWVhbnNcbiAgICAgICAgICAgICAgICAvLyBwb3RlbnRpYWxseSB0cnlpbmcgdG8gbG9hZCBhIGRpZmZlcmVudCB2ZXJzaW9uIG9mIHRoZSBBUElcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiVGhlIEFyY0dJUyBBUEkgZm9yIEphdmFTY3JpcHQgaXMgYWxyZWFkeSBsb2FkZWQuXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgYXR0ZW1wdGluZyB0byBsb2FkIHRoZSBBUElcbiAgICAgICAgICAgICAgICB2YXIgY3NzID0gb3B0cy5jc3M7XG4gICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlVmVyc2lvbiA9IGNzcyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZCB0aGUgY3NzIGJlZm9yZSBsb2FkaW5nIHRoZSBzY3JpcHRcbiAgICAgICAgICAgICAgICAgICAgbG9hZENzcyh1c2VWZXJzaW9uID8gdmVyc2lvbiA6IGNzcywgb3B0cy5pbnNlcnRDc3NCZWZvcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBzY3JpcHQgb2JqZWN0IHdob3NlIHNvdXJjZSBwb2ludHMgdG8gdGhlIEFQSVxuICAgICAgICAgICAgICAgIHNjcmlwdCA9IGNyZWF0ZVNjcmlwdCh1cmwpO1xuICAgICAgICAgICAgICAgIC8vIF9jdXJyZW50VXJsID0gdXJsO1xuICAgICAgICAgICAgICAgIC8vIG9uY2UgdGhlIHNjcmlwdCBpcyBsb2FkZWQuLi5cbiAgICAgICAgICAgICAgICBoYW5kbGVTY3JpcHRMb2FkKHNjcmlwdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHN0YXR1cyBvZiB0aGUgc2NyaXB0XG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXNyaS1sb2FkZXInLCAnbG9hZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgc2NyaXB0XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgIC8vIGxvYWQgdGhlIHNjcmlwdFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuIiwiLyogQ29weXJpZ2h0IChjKSAyMDIyIEVudmlyb25tZW50YWwgU3lzdGVtcyBSZXNlYXJjaCBJbnN0aXR1dGUsIEluYy5cbiAqIEFwYWNoZS0yLjAgKi9cbmltcG9ydCB7IGdldFNjcmlwdCwgaXNMb2FkZWQsIGxvYWRTY3JpcHQgfSBmcm9tICcuL3NjcmlwdCc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy9pbmRleCc7XG4vLyB3cmFwIERvam8ncyByZXF1aXJlKCkgaW4gYSBwcm9taXNlXG5mdW5jdGlvbiByZXF1aXJlTW9kdWxlcyhtb2R1bGVzKSB7XG4gICAgcmV0dXJuIG5ldyB1dGlscy5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gSWYgc29tZXRoaW5nIGdvZXMgd3JvbmcgbG9hZGluZyB0aGUgZXNyaS9kb2pvIHNjcmlwdHMsIHJlamVjdCB3aXRoIHRoZSBlcnJvci5cbiAgICAgICAgdmFyIGVycm9ySGFuZGxlciA9IHdpbmRvd1sncmVxdWlyZSddLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICAgIHdpbmRvd1sncmVxdWlyZSddKG1vZHVsZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHJlbW92ZSBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBlcnJvckhhbmRsZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAvLyBSZXNvbHZlIHdpdGggdGhlIHBhcmFtZXRlcnMgZnJvbSBkb2pvIHJlcXVpcmUgYXMgYW4gYXJyYXkuXG4gICAgICAgICAgICByZXNvbHZlKGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiB0aGUgcmVxdWlyZWQgbW9kdWxlc1xuLy8gYWxzbyB3aWxsIGF0dGVtcHQgdG8gbGF6eSBsb2FkIHRoZSBBcmNHSVMgQVBJIGlmIGl0IGhhcyBub3QgYWxyZWFkeSBiZWVuIGxvYWRlZFxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRNb2R1bGVzKG1vZHVsZXMsIGxvYWRTY3JpcHRPcHRpb25zKSB7XG4gICAgaWYgKGxvYWRTY3JpcHRPcHRpb25zID09PSB2b2lkIDApIHsgbG9hZFNjcmlwdE9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICghaXNMb2FkZWQoKSkge1xuICAgICAgICAvLyBzY3JpcHQgaXMgbm90IHlldCBsb2FkZWQsIGlzIGl0IGluIHRoZSBwcm9jZXNzIG9mIGxvYWRpbmc/XG4gICAgICAgIHZhciBzY3JpcHQgPSBnZXRTY3JpcHQoKTtcbiAgICAgICAgdmFyIHNyYyA9IHNjcmlwdCAmJiBzY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgaWYgKCFsb2FkU2NyaXB0T3B0aW9ucy51cmwgJiYgc3JjKSB7XG4gICAgICAgICAgICAvLyBzY3JpcHQgaXMgc3RpbGwgbG9hZGluZyBhbmQgdXNlciBkaWQgbm90IHNwZWNpZnkgYSBVUkxcbiAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIGRlZmF1bHQgdG8gdGhlIFVSTCB0aGF0J3MgYmVpbmcgbG9hZGVkXG4gICAgICAgICAgICAvLyBpbnN0ZWFkIG9mIGRlZmF1bHRpbmcgdG8gdGhlIGxhdGVzdCA0LnggVVJMXG4gICAgICAgICAgICBsb2FkU2NyaXB0T3B0aW9ucy51cmwgPSBzcmM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXR0ZW1wdCB0byBsb2FkIHRoZSBzY3JpcHQgdGhlbiBsb2FkIHRoZSBtb2R1bGVzXG4gICAgICAgIHJldHVybiBsb2FkU2NyaXB0KGxvYWRTY3JpcHRPcHRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlcXVpcmVNb2R1bGVzKG1vZHVsZXMpOyB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIHNjcmlwdCBpcyBhbHJlYWR5IGxvYWRlZCwganVzdCBsb2FkIHRoZSBtb2R1bGVzXG4gICAgICAgIHJldHVybiByZXF1aXJlTW9kdWxlcyhtb2R1bGVzKTtcbiAgICB9XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIDIwMjIgRXNyaVxuICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuLy8gcmUtZXhwb3J0IHRoZSBmdW5jdGlvbnMgdGhhdCBhcmUgcGFydCBvZiB0aGUgcHVibGljIEFQSVxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMvaW5kZXgnO1xuZXhwb3J0IHsgbG9hZE1vZHVsZXMgfSBmcm9tICcuL21vZHVsZXMnO1xuZXhwb3J0IHsgZ2V0U2NyaXB0LCBpc0xvYWRlZCwgbG9hZFNjcmlwdCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuL3NjcmlwdCc7XG5leHBvcnQgeyBsb2FkQ3NzIH0gZnJvbSAnLi91dGlscy9jc3MnO1xuZXhwb3J0IHsgdXRpbHMgfTtcbiJdLCJuYW1lcyI6WyJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJ1dGlscyIsIlByb21pc2UiLCJ1bmRlZmluZWQiLCJERUZBVUxUX1ZFUlNJT04iLCJORVhUIiwicGFyc2VWZXJzaW9uIiwidmVyc2lvbiIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJtYWpvciIsInBhcnNlSW50IiwibWlub3IiLCJnZXRDZG5VcmwiLCJjb25jYXQiLCJnZXRDZG5Dc3NVcmwiLCJiYXNlVXJsIiwicGFyc2VkVmVyc2lvbiIsInBhdGgiLCJjcmVhdGVTdHlsZXNoZWV0TGluayIsImhyZWYiLCJsaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicmVsIiwiaW5zZXJ0TGluayIsImJlZm9yZSIsImJlZm9yZU5vZGUiLCJxdWVyeVNlbGVjdG9yIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImdldENzcyIsInVybCIsImdldENzc1VybCIsInVybE9yVmVyc2lvbiIsImxvYWRDc3MiLCJkZWZhdWx0T3B0aW9ucyIsImNyZWF0ZVNjcmlwdCIsInNjcmlwdCIsInR5cGUiLCJzcmMiLCJzZXRBdHRyaWJ1dGUiLCJoYW5kbGVTY3JpcHRMb2FkIiwiY2FsbGJhY2siLCJlcnJiYWNrIiwib25TY3JpcHRFcnJvciIsImhhbmRsZVNjcmlwdEVycm9yIiwib25TY3JpcHRMb2FkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiZXJyb3IiLCJFcnJvciIsInNldERlZmF1bHRPcHRpb25zIiwib3B0aW9ucyIsImdldFNjcmlwdCIsImlzTG9hZGVkIiwiZ2xvYmFsUmVxdWlyZSIsIm9uIiwibG9hZFNjcmlwdCIsIm9wdHMiLCJmb3JFYWNoIiwib2JqIiwicHJvcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJlc29sdmUiLCJyZWplY3QiLCJnZXRBdHRyaWJ1dGUiLCJjc3MiLCJ1c2VWZXJzaW9uIiwiaW5zZXJ0Q3NzQmVmb3JlIiwiYm9keSIsInJlcXVpcmVNb2R1bGVzIiwibW9kdWxlcyIsImVycm9ySGFuZGxlciIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlbW92ZSIsImxvYWRNb2R1bGVzIiwibG9hZFNjcmlwdE9wdGlvbnMiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///480\n")},107:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n;// CONCATENATED MODULE: ./src/calcWinds.js\n/* provided dependency */ var ss = __webpack_require__(809);\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction calc_LEP(test_value, sigma, xi, u, lambda, NTC_coeff, m) {\n  var prodValue = 1;\n  for (var i = 0; i < m; i++) {\n    var lambda_i = Array.isArray(lambda) ? lambda[i] : lambda;\n    var xi_i = Array.isArray(xi) ? xi[i] : xi;\n    var sigma_i = Array.isArray(sigma) ? sigma[i] : sigma;\n    var u_i = Array.isArray(u) ? u[i] : u;\n    prodValue *= Math.exp(-lambda_i * Math.pow(1 + xi_i / sigma_i * (test_value - u_i), -1 / xi_i));\n  }\n  var p_TC = isNaN(prodValue) ? 1 : prodValue;\n  var p_NTC = Math.pow(Math.exp(-Math.exp(-(test_value - NTC_coeff[0]) / NTC_coeff[1])), m);\n  var p = 1 - p_NTC * p_TC;\n  if (p < 0) p = 1;\n  return p;\n}\nfunction nonstationary_return(x, sigma, xi, u, lambda, NTC_coeff) {\n  var m = Array.isArray(sigma) ? sigma.length : 1;\n  var test_value = m === 1 ? u : Math.ceil(ss.max(u));\n  var p = 1;\n  while (p > x) {\n    p = calc_LEP(test_value, sigma, xi, u, lambda, NTC_coeff, m);\n    test_value++;\n  }\n  var xd = test_value - 1;\n  return xd;\n}\nfunction nonstationary_return_MRI(N, sigma, xi, u, lambda, NTC_coeff) {\n  // Check first year\n  var test_value_i = Math.ceil(ss.max(u));\n  var MRI = 0;\n  while (N > MRI) {\n    var T_TC = Math.pow(1 - Math.exp(-lambda[0] * Math.pow(1 + xi[0] / sigma[0] * (test_value_i - u[0]), -1 / xi[0])), -1);\n    if (isNaN(T_TC)) {\n      T_TC = Infinity;\n    }\n    var T_NTC = Math.pow(1 - Math.exp(-Math.exp(-(test_value_i - NTC_coeff[0]) / NTC_coeff[1])), -1);\n    MRI = Math.pow(1 - (1 - 1 / T_TC) * (1 - 1 / T_NTC), -1);\n    if (MRI < 0) {\n      MRI = 0;\n    }\n    test_value_i++;\n  }\n\n  // Check final year\n  var test_value_f = Math.ceil(ss.max(u));\n  MRI = 0;\n  while (N > MRI) {\n    var _T_TC = Math.pow(1 - Math.exp(-lambda[1] * Math.pow(1 + xi[1] / sigma[1] * (test_value_f - u[1]), -1 / xi[1])), -1);\n    if (isNaN(_T_TC)) {\n      _T_TC = Infinity;\n    }\n    var _T_NTC = Math.pow(1 - Math.exp(-Math.exp(-(test_value_i - NTC_coeff[0]) / NTC_coeff[1])), -1);\n    MRI = Math.pow(1 - (1 - 1 / _T_TC) * (1 - 1 / _T_NTC), -1);\n    if (MRI < 0) {\n      MRI = 0;\n    }\n    test_value_f++;\n  }\n  var xd = Math.max(test_value_i, test_value_f) - 1;\n  return xd;\n}\nfunction addVectors(a, b) {\n  if (a.length !== b.length) {\n    throw new Error(\'Vectors must have the same length\');\n  }\n  var result = [];\n  for (var i = 0; i < a.length; i++) {\n    result.push(a[i] + b[i]);\n  }\n  return result;\n}\nfunction calc_winds(countyData, buildYear, riskCat, lifespan, method, units) {\n  var _res;\n  // console.log(`Calculating for ${method}`)  \n  // Set up\n  var past_m = 2000; // middle year of past climate\n  var future_f = 2100; // last year of future climate\n\n  if (buildYear < past_m) {\n    alert(\'stationary climate assumed for years before 2000\');\n  }\n  var past = [countyData.scale_past, countyData.shp_past];\n  var future = [countyData.scale_future, countyData.shp_future];\n  var u_past = countyData.uS_past;\n  var u_future = countyData.uS_future;\n  var lambda_past = countyData.lambda_past;\n  var lambda_future = countyData.lambda_future;\n  var years_list = [10, 25, 50, 100, 300, 700, 1700, 3000, 10000, 100000, 1000000];\n  var xd;\n  var winds;\n  if (method === \'LEP\' || method === \'AEP\') {\n    // console.log("LEP or AEP")\n    var year = Array.from({\n      length: lifespan\n    }, function (_, i) {\n      return buildYear + i;\n    });\n    if (year.some(function (y) {\n      return y > future_f;\n    })) {\n      alert(\'stationary climate assumed for years after 2100\');\n    }\n    var coeff_p = year.map(function (y) {\n      return (future_f - y) / (future_f - past_m);\n    });\n    var coeff_f = year.map(function (y) {\n      return (y - past_m) / (future_f - past_m);\n    });\n    for (var i = 0; i < lifespan; i++) {\n      if (year[i] <= past_m) {\n        coeff_p[i] = 1;\n        coeff_f[i] = 0;\n      }\n      if (year[i] >= future_f) {\n        coeff_p[i] = 0;\n        coeff_f[i] = 1;\n      }\n    }\n\n    // Linear Interpolation\n    var sigma = addVectors(coeff_p.map(function (x) {\n      return x * past[0];\n    }), coeff_f.map(function (x) {\n      return x * future[0];\n    })); // scale param \n    var xi = addVectors(coeff_p.map(function (x) {\n      return x * past[1];\n    }), coeff_f.map(function (x) {\n      return x * future[1];\n    })); // shape param\n    var u = addVectors(coeff_p.map(function (x) {\n      return x * u_past;\n    }), coeff_f.map(function (x) {\n      return x * u_future;\n    })); // threshold param\n    var lambda = addVectors(coeff_p.map(function (x) {\n      return x * lambda_past;\n    }), coeff_f.map(function (x) {\n      return x * lambda_future;\n    })); // freq\n\n    var ASCE = [300, 700, 1700, 3000];\n    var MRI = ASCE[riskCat - 1];\n    var x = 1 - Math.pow(1 - 1 / MRI, lifespan);\n\n    // design wind speeds\n    var year_max;\n    var xd_LEP = nonstationary_return(x, sigma, xi, u, lambda, [countyData.NTC_1, countyData.NTC_2]);\n    if (method === "AEP") {\n      // console.log("AEP")\n      // check against LEP design wind\n      var AEP = new Array(lifespan.length);\n      for (var _i = 0; _i < lifespan; _i++) {\n        AEP[_i] = calc_LEP(xd_LEP, sigma[_i], xi[_i], u[_i], lambda[_i], [countyData.NTC_1, countyData.NTC_2], 1); // 1 for one year\n      }\n\n      // check direction\n      var x_arr = Array.from({\n        length: lifespan\n      }, function (_, i) {\n        return i + 1;\n      });\n      var m = ss.linearRegression([x_arr, AEP]).m;\n      var dir = m > 0 ? 1 : 0;\n      var maxAEP = ss.max(AEP);\n      if (dir === 1 && maxAEP > 1 / MRI) {\n        // console.log("Getting AEP design wind")\n        var idxs = [];\n        AEP.forEach(function (item, index) {\n          return item === maxAEP ? idxs.push(index) : null;\n        });\n        year_max = idxs.slice(-1);\n        sigma = sigma[year_max];\n        xi = xi[year_max];\n        u = u[year_max];\n        lambda = lambda[year_max];\n        xd = nonstationary_return(1 / MRI, sigma, xi, u, lambda, [countyData.NTC_1, countyData.NTC_2]);\n      }\n    }\n    if (method === "LEP" || typeof xd === \'undefined\') {\n      // when AEP met, use LEP design wind\n      // console.log(`Use LEP wind in the ${method} approach`)\n      xd = xd_LEP;\n    }\n    winds = new Array(years_list.length);\n    for (var _i2 = 0; _i2 < years_list.length; _i2++) {\n      var _x = void 0;\n      if (method == "LEP" || typeof year_max === \'undefined\') {\n        _x = 1 - Math.pow(1 - 1 / years_list[_i2], lifespan);\n      } else if (method === "AEP") {\n        _x = 1 / years_list[_i2];\n      }\n      winds[_i2] = nonstationary_return(_x, sigma, xi, u, lambda, [countyData.NTC_1, countyData.NTC_2]);\n    }\n  } else if (method === "MRI") {\n    var _year = [buildYear, buildYear + lifespan - 1];\n    if (Math.max.apply(Math, _year) > future_f) alert(\'stationary climate assumed for years after 2100\');\n    var _coeff_p = _year.map(function (y) {\n      return (future_f - y) / (future_f - past_m);\n    });\n    var _coeff_f = _year.map(function (y) {\n      return (y - past_m) / (future_f - past_m);\n    });\n    for (var _i3 = 0; _i3 < 2; _i3++) {\n      if (_year[_i3] <= past_m) {\n        _coeff_p[_i3] = 1;\n        _coeff_f[_i3] = 0;\n      }\n      if (_year[_i3] >= future_f) {\n        _coeff_p[_i3] = 0;\n        _coeff_f[_i3] = 1;\n      }\n    }\n    var _sigma = addVectors(_coeff_p.map(function (x) {\n      return x * past[0];\n    }), _coeff_f.map(function (x) {\n      return x * future[0];\n    })); // scale param \n    var _xi = addVectors(_coeff_p.map(function (x) {\n      return x * past[1];\n    }), _coeff_f.map(function (x) {\n      return x * future[1];\n    })); // shape param\n    var _u = addVectors(_coeff_p.map(function (x) {\n      return x * u_past;\n    }), _coeff_f.map(function (x) {\n      return x * u_future;\n    })); // threshold param\n    var _lambda = addVectors(_coeff_p.map(function (x) {\n      return x * lambda_past;\n    }), _coeff_f.map(function (x) {\n      return x * lambda_future;\n    })); // freq\n\n    var _ASCE = [300, 700, 1700, 3000];\n    var N = _ASCE[riskCat - 1];\n    xd = nonstationary_return_MRI(N, _sigma, _xi, _u, _lambda, [countyData.NTC_1, countyData.NTC_2]);\n\n    // Additional wind return levels\n    winds = Array.from({\n      length: years_list.length\n    }, function () {\n      return NaN;\n    });\n    for (var _i4 = 0; _i4 < years_list.length; _i4++) {\n      winds[_i4] = nonstationary_return_MRI(years_list[_i4], _sigma, _xi, _u, _lambda, [countyData.NTC_1, countyData.NTC_2]);\n    }\n  }\n  var ms_to_mph = 2.23694;\n  xd = units === "SI" ? xd : ms_to_mph * xd;\n  xd = Math.round(xd * 100) / 100; // rounds to 2 decimal places\n  units = units === "SI" ? "m/s" : "mph";\n  var key1 = "Design Wind (".concat(units, ")");\n  var res = (_res = {\n    "County": countyData.NAME\n  }, _defineProperty(_res, key1, xd), _defineProperty(_res, "Build Year", buildYear), _defineProperty(_res, "Lifespan", lifespan), _defineProperty(_res, "Latitude", countyData.latP.toFixed(2)), _defineProperty(_res, "Longitude", countyData.lonP.toFixed(2)), _defineProperty(_res, "Risk Category", riskCat === 1 ? "I" : riskCat === 2 ? "II" : riskCat === 3 ? "III" : "IV"), _defineProperty(_res, "10-year MRI", (units === "m/s" ? winds[0] : ms_to_mph * winds[0]).toFixed(0)), _defineProperty(_res, "25-year MRI", (units === "m/s" ? winds[1] : ms_to_mph * winds[1]).toFixed(0)), _defineProperty(_res, "50-year MRI", (units === "m/s" ? winds[2] : ms_to_mph * winds[2]).toFixed(0)), _defineProperty(_res, "100-year MRI", (units === "m/s" ? winds[3] : ms_to_mph * winds[3]).toFixed(0)), _defineProperty(_res, "300-year MRI", (units === "m/s" ? winds[4] : ms_to_mph * winds[4]).toFixed(0)), _defineProperty(_res, "700-year MRI", (units === "m/s" ? winds[5] : ms_to_mph * winds[5]).toFixed(0)), _defineProperty(_res, "1,700-year MRI", (units === "m/s" ? winds[6] : ms_to_mph * winds[6]).toFixed(0)), _defineProperty(_res, "3,000-year MRI", (units === "m/s" ? winds[7] : ms_to_mph * winds[7]).toFixed(0)), _defineProperty(_res, "10,000-year MRI", (units === "m/s" ? winds[8] : ms_to_mph * winds[8]).toFixed(0)), _defineProperty(_res, "100,000-year MRI", (units === "m/s" ? winds[9] : ms_to_mph * winds[9]).toFixed(0)), _defineProperty(_res, "1,000,000-year MRI", (units === "m/s" ? winds[10] : ms_to_mph * winds[10]).toFixed(0)), _res);\n  return res;\n}\n// EXTERNAL MODULE: ./node_modules/esri-loader/dist/umd/esri-loader.js\nvar esri_loader = __webpack_require__(480);\n;// CONCATENATED MODULE: ./src/generateTable.js\nfunction goBack() {\n  var formDiv = document.getElementById("form-div");\n  formDiv.classList.remove("hidden");\n  var tableDiv = document.getElementById("table-div");\n  tableDiv.classList.add("hidden");\n}\nfunction generateTable(data) {\n  // Hide Form\n  var formDiv = document.getElementById("form-div");\n  formDiv.classList.add("hidden");\n\n  // Button set up\n  var backButton = document.getElementById("back-button");\n  backButton.addEventListener("click", function () {\n    goBack();\n  });\n\n  // Fill table with values\n  var table = document.getElementById("resTable");\n  table.rows[1].cells[0].textContent = Object.keys(data)[1];\n  for (var i = 0; i < table.rows.length; i++) {\n    var row = table.rows[i];\n    var rowName = row.cells[0].textContent.trim();\n    row.cells[1].textContent = data[rowName];\n  }\n  document.getElementById("table-div").classList.remove("hidden");\n}\n;// CONCATENATED MODULE: ./src/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\nesri_loader.loadModules(["esri/config", "esri/WebMap", "esri/views/MapView", "esri/widgets/Locate", "esri/widgets/Search", "esri/widgets/ScaleBar", "esri/widgets/Compass", "esri/rest/locator"], {\n  css: true\n}).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 9),\n    esriConfig = _ref2[0],\n    WebMap = _ref2[1],\n    MapView = _ref2[2],\n    Locate = _ref2[3],\n    Search = _ref2[4],\n    ScaleBar = _ref2[5],\n    Compass = _ref2[6],\n    SearchSource = _ref2[7],\n    locator = _ref2[8];\n  esriConfig.apiKey = "AAPK67c58f2fc7db4d2c94008117be9258dfQgEtYssZ96mCuu03Lw7S0xw0kMlTLFhj7BNBSpuip6n7BvD-Drz-GoDehFlw5pqx";\n  var webmap = new WebMap({\n    portalItem: {\n      id: "64bc30d474a540dba020895891b1d5db"\n    }\n  });\n  var view = new MapView({\n    container: "viewDiv",\n    map: webmap,\n    center: [-74.6, 37.5],\n    // Longitude, latitude\n    zoom: 5,\n    // Start zoom level\n    constraints: {\n      minZoom: 15,\n      maxZoom: 4\n    }\n  });\n\n  // Add widgets\n  var scalebar = new ScaleBar({\n    view: view\n  });\n  var locate = new Locate({\n    view: view,\n    useHeadingEnabled: false,\n    goToOverride: function goToOverride(view, options) {\n      options.target.scale = 1500;\n      return view.goTo(options.target);\n    }\n  });\n  var compass = new Compass({\n    view: view\n  });\n\n  // Add widgets to map\n  view.ui.add(scalebar, "bottom-left");\n  view.ui.add([locate, compass], "top-left");\n\n  // Configure search widget\n  var searchWidget;\n  // const geocodeUrl = \'https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver/StandardGeographyQuery/execute?sourceCountry=US&geographylayers=["US.Counties"]&geographyids=[]&returnGeometry=true&returnSubGeographyLayer=true&generalizationLevel=2&useFuzzySearch=true&f=pjson\';\n  // const params = {\n  //   SingleLine: "1600 Pennsylvania Ave NW, Washington, DC 20500",\n  //   outFields: "AddNum,StAddr,City,RegionAbbr,Postal,Country,FIPSCounty",\n  //   maxLocations: 1,\n  //   f: "json"\n  // };\n  // console.log(webmap.allLayers)\n\n  // var countiesSource = new SearchSource({\n  //   name: "US Counties",\n  //   placeholder: "Search for US County",\n  //   getSuggestions: function(params) {\n  //     return US_counties_geocode.suggest(params);\n  //   },\n  //   search: function(params) {\n  //     return US_counties_geocode.search(params);\n  //   },\n  //   suggestionTemplate: "{name}, {region}, {country}",\n  //   minSuggestCharacters: 3\n  // });\n\n  // function addSearchWidget() {\n  //   console.log("adding")\n  //   // Check if widget has already been added\n  //   if (!searchWidget) {\n  //     searchWidget = new Search({\n  //       view: view,\n  //       container: document.getElementById("search-bar"),\n  //       includeDefaultSources: true,\n  //       // sources: [countiesSource]\n  //     });\n\n  //   }\n  // }\n  // // addSearchWidget();\n\n  // Perform wind speed calculations\n  var form = document.querySelector("form");\n  form.addEventListener("submit", function (e) {\n    e.stopImmediatePropagation();\n    e.preventDefault(); // Prevent the form from submitting\n\n    // User Inputs\n    var scenario = document.getElementById("scenario-select").value;\n    var loc = document.getElementById("location-input").value;\n    var lifespan = parseInt(document.getElementById("lifespan-input").value);\n    var buildYear = parseInt(document.getElementById("year-input").value);\n    var riskCat = parseInt(document.getElementById("category-select").value);\n    var method = document.getElementById("method-select").value;\n    var units = document.getElementById("units-select").value;\n\n    // Get relevant feature layer\n    var featureLayer = webmap.allLayers.find(function (featureLayer) {\n      return featureLayer.title === scenario;\n    });\n\n    // Wait for the layer to load\n    featureLayer.load().then(function () {\n      // Create a new query\n      var query = featureLayer.createQuery();\n      query.where = "county_fips = \'".concat(parseInt(loc), "\'");\n\n      // Run the query and return the results\n      featureLayer.queryFeatures(query).then(function (result) {\n        if (result.features.length > 0) {\n          var data = result.features[0].attributes;\n\n          // Create an empty list to store the field-value pairs\n          var dataList = {};\n\n          // Loop through the properties of the object and add them to the list\n          for (var field in data) {\n            if (data.hasOwnProperty(field)) {\n              dataList[field] = data[field];\n            }\n          }\n\n          // Calculate design winds\n          var results = calc_winds(dataList, buildYear, riskCat, lifespan, method, units);\n          // Save form HTML and generate table with results\n          generateTable(results);\n        } else {\n          alert("No data was found for location: ".concat(loc, ". Please try again with a different location."));\n        }\n      });\n    })["catch"](function (error) {\n      console.error("Error loading feature layer:", error);\n    });\n  }); //, { once: true });\n});\n\n// const serviceUrl = "http://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer";\n// view.on("click", function(evt){\n//   const params = {\n//     location: evt.mapPoint\n//   };\n\n//  locator.locationToAddress(serviceUrl, params)\n//     .then(function(response) { // Show the address found\n//       const address = response.address;\n//       console.log(response)\n//       showAddress(address, evt.mapPoint);\n//     }, function(err) { // Show no address found\n//       showAddress("No address found.", evt.mapPoint);\n//     });\n\n// });\n\n// function showAddress(address, pt) {\n//   view.popup.open({\n//     title:  + Math.round(pt.longitude * 100000)/100000 + ", " + Math.round(pt.latitude * 100000)/100000,\n//     content: address,\n//     location: pt\n//   });\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///107\n')},809:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "BayesianClassifier": () => (/* binding */ BayesianClassifier),\n/* harmony export */   "PerceptronModel": () => (/* binding */ PerceptronModel),\n/* harmony export */   "addToMean": () => (/* binding */ addToMean),\n/* harmony export */   "approxEqual": () => (/* binding */ approxEqual),\n/* harmony export */   "average": () => (/* binding */ mean),\n/* harmony export */   "averageSimple": () => (/* binding */ meanSimple),\n/* harmony export */   "bayesian": () => (/* binding */ BayesianClassifier),\n/* harmony export */   "bernoulliDistribution": () => (/* binding */ bernoulliDistribution),\n/* harmony export */   "binomialDistribution": () => (/* binding */ binomialDistribution),\n/* harmony export */   "bisect": () => (/* binding */ bisect),\n/* harmony export */   "chiSquaredDistributionTable": () => (/* binding */ chiSquaredDistributionTable),\n/* harmony export */   "chiSquaredGoodnessOfFit": () => (/* binding */ chiSquaredGoodnessOfFit),\n/* harmony export */   "chunk": () => (/* binding */ chunk),\n/* harmony export */   "ckmeans": () => (/* binding */ ckmeans),\n/* harmony export */   "coefficientOfVariation": () => (/* binding */ coefficientOfVariation),\n/* harmony export */   "combinations": () => (/* binding */ combinations),\n/* harmony export */   "combinationsReplacement": () => (/* binding */ combinationsReplacement),\n/* harmony export */   "combineMeans": () => (/* binding */ combineMeans),\n/* harmony export */   "combineVariances": () => (/* binding */ combineVariances),\n/* harmony export */   "cumulativeStdLogisticProbability": () => (/* binding */ cumulativeStdLogisticProbability),\n/* harmony export */   "cumulativeStdNormalProbability": () => (/* binding */ cumulativeStdNormalProbability),\n/* harmony export */   "epsilon": () => (/* binding */ epsilon),\n/* harmony export */   "equalIntervalBreaks": () => (/* binding */ equalIntervalBreaks),\n/* harmony export */   "erf": () => (/* binding */ errorFunction),\n/* harmony export */   "errorFunction": () => (/* binding */ errorFunction),\n/* harmony export */   "extent": () => (/* binding */ extent),\n/* harmony export */   "extentSorted": () => (/* binding */ extentSorted),\n/* harmony export */   "factorial": () => (/* binding */ factorial),\n/* harmony export */   "gamma": () => (/* binding */ gamma),\n/* harmony export */   "gammaln": () => (/* binding */ gammaln),\n/* harmony export */   "geometricMean": () => (/* binding */ geometricMean),\n/* harmony export */   "harmonicMean": () => (/* binding */ harmonicMean),\n/* harmony export */   "interquartileRange": () => (/* binding */ interquartileRange),\n/* harmony export */   "inverseErrorFunction": () => (/* binding */ inverseErrorFunction),\n/* harmony export */   "iqr": () => (/* binding */ interquartileRange),\n/* harmony export */   "jenks": () => (/* binding */ jenks),\n/* harmony export */   "kMeansCluster": () => (/* binding */ kMeansCluster),\n/* harmony export */   "kde": () => (/* binding */ kernelDensityEstimation),\n/* harmony export */   "kernelDensityEstimation": () => (/* binding */ kernelDensityEstimation),\n/* harmony export */   "linearRegression": () => (/* binding */ linearRegression),\n/* harmony export */   "linearRegressionLine": () => (/* binding */ linearRegressionLine),\n/* harmony export */   "logAverage": () => (/* binding */ logAverage),\n/* harmony export */   "logit": () => (/* binding */ logit),\n/* harmony export */   "mad": () => (/* binding */ medianAbsoluteDeviation),\n/* harmony export */   "max": () => (/* binding */ max),\n/* harmony export */   "maxSorted": () => (/* binding */ maxSorted),\n/* harmony export */   "mean": () => (/* binding */ mean),\n/* harmony export */   "meanSimple": () => (/* binding */ meanSimple),\n/* harmony export */   "median": () => (/* binding */ median),\n/* harmony export */   "medianAbsoluteDeviation": () => (/* binding */ medianAbsoluteDeviation),\n/* harmony export */   "medianSorted": () => (/* binding */ medianSorted),\n/* harmony export */   "min": () => (/* binding */ min),\n/* harmony export */   "minSorted": () => (/* binding */ minSorted),\n/* harmony export */   "mode": () => (/* binding */ mode),\n/* harmony export */   "modeFast": () => (/* binding */ modeFast),\n/* harmony export */   "modeSorted": () => (/* binding */ modeSorted),\n/* harmony export */   "numericSort": () => (/* binding */ numericSort),\n/* harmony export */   "perceptron": () => (/* binding */ PerceptronModel),\n/* harmony export */   "permutationTest": () => (/* binding */ permutationTest),\n/* harmony export */   "permutationsHeap": () => (/* binding */ permutationsHeap),\n/* harmony export */   "poissonDistribution": () => (/* binding */ poissonDistribution),\n/* harmony export */   "probit": () => (/* binding */ probit),\n/* harmony export */   "product": () => (/* binding */ product),\n/* harmony export */   "quantile": () => (/* binding */ quantile),\n/* harmony export */   "quantileRank": () => (/* binding */ quantileRank),\n/* harmony export */   "quantileRankSorted": () => (/* binding */ quantileRankSorted),\n/* harmony export */   "quantileSorted": () => (/* binding */ quantileSorted),\n/* harmony export */   "quickselect": () => (/* binding */ quickselect),\n/* harmony export */   "rSquared": () => (/* binding */ rSquared),\n/* harmony export */   "relativeError": () => (/* binding */ relativeError),\n/* harmony export */   "rms": () => (/* binding */ rootMeanSquare),\n/* harmony export */   "rootMeanSquare": () => (/* binding */ rootMeanSquare),\n/* harmony export */   "sample": () => (/* binding */ sample),\n/* harmony export */   "sampleCorrelation": () => (/* binding */ sampleCorrelation),\n/* harmony export */   "sampleCovariance": () => (/* binding */ sampleCovariance),\n/* harmony export */   "sampleKurtosis": () => (/* binding */ sampleKurtosis),\n/* harmony export */   "sampleRankCorrelation": () => (/* binding */ sampleRankCorrelation),\n/* harmony export */   "sampleSkewness": () => (/* binding */ sampleSkewness),\n/* harmony export */   "sampleStandardDeviation": () => (/* binding */ sampleStandardDeviation),\n/* harmony export */   "sampleVariance": () => (/* binding */ sampleVariance),\n/* harmony export */   "sampleWithReplacement": () => (/* binding */ sampleWithReplacement),\n/* harmony export */   "shuffle": () => (/* binding */ shuffle),\n/* harmony export */   "shuffleInPlace": () => (/* binding */ shuffleInPlace),\n/* harmony export */   "sign": () => (/* binding */ sign),\n/* harmony export */   "silhouette": () => (/* binding */ silhouette),\n/* harmony export */   "silhouetteMetric": () => (/* binding */ silhouetteMetric),\n/* harmony export */   "standardDeviation": () => (/* binding */ standardDeviation),\n/* harmony export */   "standardNormalTable": () => (/* binding */ standardNormalTable),\n/* harmony export */   "subtractFromMean": () => (/* binding */ subtractFromMean),\n/* harmony export */   "sum": () => (/* binding */ sum),\n/* harmony export */   "sumNthPowerDeviations": () => (/* binding */ sumNthPowerDeviations),\n/* harmony export */   "sumSimple": () => (/* binding */ sumSimple),\n/* harmony export */   "tTest": () => (/* binding */ tTest),\n/* harmony export */   "tTestTwoSample": () => (/* binding */ tTestTwoSample),\n/* harmony export */   "uniqueCountSorted": () => (/* binding */ uniqueCountSorted),\n/* harmony export */   "variance": () => (/* binding */ variance),\n/* harmony export */   "wilcoxonRankSum": () => (/* binding */ wilcoxonRankSum),\n/* harmony export */   "zScore": () => (/* binding */ zScore)\n/* harmony export */ });\n/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n    var m, b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    var dataLength = data.length;\n\n    //if there\'s only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        var sumX = 0,\n            sumY = 0,\n            sumXX = 0,\n            sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        var point, x, y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (var i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m =\n            (dataLength * sumXY - sumX * sumY) /\n            (dataLength * sumXX - sumX * sumX);\n\n        // `b` is the y-intercept of the line.\n        b = sumY / dataLength - (m * sumX) / dataLength;\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\n/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb /*: { b: number, m: number }*/) {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function (x) {\n        return mb.b + mb.m * x;\n    };\n}\n\n/**\n * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).\n * This method is an improvement over the classical\n * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).\n * It aims at computing the sum of a list of numbers while correcting for\n * floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\nfunction sum(x) {\n    // If the array is empty, we needn\'t bother computing its sum\n    if (x.length === 0) {\n        return 0;\n    }\n\n    // Initializing the sum as the first number in the array\n    var sum = x[0];\n\n    // Keeping track of the floating-point error correction\n    var correction = 0;\n\n    var transition;\n\n    if (typeof sum !== "number") {\n        return NaN;\n    }\n\n    for (var i = 1; i < x.length; i++) {\n        if (typeof x[i] !== "number") {\n            return NaN;\n        }\n        transition = sum + x[i];\n\n        // Here we need to update the correction in a different fashion\n        // if the new absolute value is greater than the absolute sum\n        if (Math.abs(sum) >= Math.abs(x[i])) {\n            correction += sum - transition + x[i];\n        } else {\n            correction += x[i] - transition + sum;\n        }\n\n        sum = transition;\n    }\n\n    // Returning the corrected sum\n    return sum + correction;\n}\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction mean(x) {\n    if (x.length === 0) {\n        throw new Error("mean requires at least one data point");\n    }\n\n    return sum(x) / x.length;\n}\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it\'s the sum of squared deviations.\n * When n=3 it\'s the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    var meanValue = mean(x);\n    var sum = 0;\n    var tempValue;\n    var i;\n\n    // This is an optimization: when n is 2 (we\'re computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population of one or more data points\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @throws {Error} if x\'s length is 0\n * @example\n * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665\n */\nfunction variance(x) {\n    if (x.length === 0) {\n        throw new Error("variance requires at least one data point");\n    }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. This is also known as the population\n * standard deviation. It\'s useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4\n * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2\n */\nfunction standardDeviation(x) {\n    if (x.length === 1) {\n        return 0;\n    }\n    var v = variance(x);\n    return Math.sqrt(v);\n}\n\n/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(x, func) {\n    if (x.length < 2) {\n        return 1;\n    }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    var sum = 0;\n    for (var i = 0; i < x.length; i++) {\n        sum += x[i][1];\n    }\n    var average = sum / x.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    var sumOfSquares = 0;\n    for (var j = 0; j < x.length; j++) {\n        sumOfSquares += Math.pow(average - x[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    var err = 0;\n    for (var k = 0; k < x.length; k++) {\n        err += Math.pow(x[k][1] - func(x[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)` because the input is sorted.\n *\n * @param {Array<number>} sorted a sample of one or more data points\n * @returns {number} mode\n * @throws {Error} if sorted is empty\n * @example\n * modeSorted([0, 0, 1]); // => 0\n */\nfunction modeSorted(sorted) {\n    // Handle edge cases:\n    // The mode of an empty list is undefined\n    if (sorted.length === 0) {\n        throw new Error("mode requires at least one data point");\n    } else if (sorted.length === 1) {\n        return sorted[0];\n    }\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    var last = sorted[0],\n        // store the mode as we find new modes\n        value = NaN,\n        // store how many times we\'ve seen the mode\n        maxSeen = 0,\n        // how many times the current candidate for the mode\n        // has been seen\n        seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (var i = 1; i < sorted.length + 1; i++) {\n        // we\'re seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n            // if this isn\'t a new number, it\'s one more occurrence of\n            // the potential mode\n        } else {\n            seenThis++;\n        }\n    }\n    return value;\n}\n\n/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} x input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // => [1, 2, 3]\n */\nfunction numericSort(x) {\n    return (\n        x\n            // ensure the array is not changed in-place\n            .slice()\n            // comparator function that treats input as numeric\n            .sort(function (a, b) {\n                return a - b;\n            })\n    );\n}\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n log(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x) {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it\'s new and we\'ll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\n/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn\'t support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast([\'rabbits\', \'rabbits\', \'squirrels\']); // => \'rabbits\'\n */\nfunction modeFast(x) {\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    var index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    var mode;\n    var modeCount = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        var newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error("mode requires at last one data point");\n    }\n\n    return mode;\n}\n\n/**\n * The min is the lowest number in the array.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // => -10\n */\nfunction min(x) {\n    if (x.length === 0) {\n        throw new Error("min requires at least one data point");\n    }\n\n    var value = x[0];\n    for (var i = 1; i < x.length; i++) {\n        if (x[i] < value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\n/**\n * This computes the maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * max([1, 2, 3, 4]);\n * // => 4\n */\nfunction max(x) {\n    if (x.length === 0) {\n        throw new Error("max requires at least one data point");\n    }\n\n    var value = x[0];\n    for (var i = 1; i < x.length; i++) {\n        if (x[i] > value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\n/**\n * This computes the minimum & maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {Array<number>} minimum & maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * extent([1, 2, 3, 4]);\n * // => [1, 4]\n */\nfunction extent(x) {\n    if (x.length === 0) {\n        throw new Error("extent requires at least one data point");\n    }\n\n    var min = x[0];\n    var max = x[0];\n    for (var i = 1; i < x.length; i++) {\n        if (x[i] > max) {\n            max = x[i];\n        }\n        if (x[i] < min) {\n            min = x[i];\n        }\n    }\n    return [min, max];\n}\n\n/**\n * The minimum is the lowest number in the array. With a sorted array,\n * the first element in the array is always the smallest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * minSorted([-100, -10, 1, 2, 5]); // => -100\n */\nfunction minSorted(x) {\n    return x[0];\n}\n\n/**\n * The maximum is the highest number in the array. With a sorted array,\n * the last element in the array is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * maxSorted([-100, -10, 1, 2, 5]); // => 5\n */\nfunction maxSorted(x) {\n    return x[x.length - 1];\n}\n\n/**\n * The extent is the lowest & highest number in the array. With a sorted array,\n * the first element in the array is always the lowest while the last element is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {Array<number>} minimum & maximum value\n * @example\n * extentSorted([-100, -10, 1, 2, 5]); // => [-100, 5]\n */\nfunction extentSorted(x) {\n    return [x[0], x[x.length - 1]];\n}\n\n/**\n * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sumSimple([1, 2, 3]); // => 6\n */\nfunction sumSimple(x) {\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        if (typeof x[i] !== "number") {\n            return NaN;\n        }\n        value += x[i];\n    }\n    return value;\n}\n\n/**\n * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array\n * is the result of multiplying all numbers together, starting using one as the multiplicative identity.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} product of all input numbers\n * @example\n * product([1, 2, 3, 4]); // => 24\n */\nfunction product(x) {\n    var value = 1;\n    for (var i = 0; i < x.length; i++) {\n        value *= x[i];\n    }\n    return value;\n}\n\n/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don\'t need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n    var idx = x.length * p;\n    if (x.length === 0) {\n        throw new Error("quantile requires at least one data point.");\n    } else if (p < 0 || p > 1) {\n        throw new Error("quantiles must be between 0 and 1");\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return x[x.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return x[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return x[Math.ceil(idx) - 1];\n    } else if (x.length % 2 === 0) {\n        // If the list has even-length, we\'ll take the average of this number\n        // and the next value, if there is one\n        return (x[idx - 1] + x[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the x value at the index.\n        return x[idx];\n    }\n}\n\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n    left = left || 0;\n    right = right || arr.length - 1;\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp((2 * z) / 3);\n            var sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n            if (m - n / 2 < 0) { sd *= -1; }\n            var newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n            var newRight = Math.min(\n                right,\n                Math.floor(k + ((n - m) * s) / n + sd)\n            );\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) { swap(arr, left, right); }\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) { i++; }\n            while (arr[j] > t) { j--; }\n        }\n\n        if (arr[left] === t) { swap(arr, left, j); }\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) { left = j + 1; }\n        if (k <= j) { right = j - 1; }\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it\'s just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x, p) {\n    var copy = x.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        var results = [];\n        // For each requested quantile\n        for (var i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        var idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    var indices = [0];\n    for (var i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    var stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        var r = Math.ceil(stack.pop());\n        var l = Math.floor(stack.pop());\n        if (r - l <= 1) { continue; }\n\n        var m = Math.floor((l + r) / 2);\n        quantileSelect(\n            arr,\n            indices[m],\n            Math.floor(indices[l]),\n            Math.ceil(indices[r])\n        );\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len, p) {\n    var idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we\'ll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\n/* eslint no-bitwise: 0 */\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. With a sorted array, leveraging binary search, we can find\n * this information in logarithmic time.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRankSorted([1, 2, 3, 4], 3); // => 0.75\n * quantileRankSorted([1, 2, 3, 3, 4], 3); // => 0.7\n * quantileRankSorted([1, 2, 3, 4], 6); // => 1\n * quantileRankSorted([1, 2, 3, 3, 5], 4); // => 0.8\n */\nfunction quantileRankSorted(x, value) {\n    // Value is lesser than any value in the array\n    if (value < x[0]) {\n        return 0;\n    }\n\n    // Value is greater than any value in the array\n    if (value > x[x.length - 1]) {\n        return 1;\n    }\n\n    var l = lowerBound(x, value);\n\n    // Value is not in the array\n    if (x[l] !== value) {\n        return l / x.length;\n    }\n\n    l++;\n\n    var u = upperBound(x, value);\n\n    // The value exists only once in the array\n    if (u === l) {\n        return l / x.length;\n    }\n\n    // Here, we are basically computing the mean of the range of indices\n    // containing our searched value. But, instead, of initializing an\n    // array and looping over it, there is a dedicated math formula that\n    // we apply below to get the result.\n    var r = u - l + 1;\n    var sum = (r * (u + l)) / 2;\n    var mean = sum / r;\n\n    return mean / x.length;\n}\n\nfunction lowerBound(x, value) {\n    var mid = 0;\n    var lo = 0;\n    var hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value <= x[mid]) {\n            hi = mid;\n        } else {\n            lo = -~mid;\n        }\n    }\n\n    return lo;\n}\n\nfunction upperBound(x, value) {\n    var mid = 0;\n    var lo = 0;\n    var hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value >= x[mid]) {\n            lo = -~mid;\n        } else {\n            hi = mid;\n        }\n    }\n\n    return lo;\n}\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. It will copy and sort your array before each run, so\n * if you know your array is already sorted, you should use `quantileRankSorted`\n * instead.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRank([4, 3, 1, 2], 3); // => 0.75\n * quantileRank([4, 3, 2, 3, 1], 3); // => 0.7\n * quantileRank([2, 4, 1, 3], 6); // => 1\n * quantileRank([5, 3, 1, 2, 3], 4); // => 0.8\n */\nfunction quantileRank(x, value) {\n    // Cloning and sorting the array\n    var sortedCopy = numericSort(x);\n\n    return quantileRankSorted(sortedCopy, value);\n}\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It\'s computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); // => 2\n */\nfunction interquartileRange(x) {\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    var q1 = quantile(x, 0.75);\n    var q2 = quantile(x, 0.25);\n\n    if (typeof q1 === "number" && typeof q2 === "number") {\n        return q1 - q2;\n    }\n}\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of \'the middle\'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn\'t necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * median([10, 2, 5, 100, 2, 1]); // => 3.5\n */\nfunction median(x) {\n    return +quantile(x, 0.5);\n}\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1\n */\nfunction medianAbsoluteDeviation(x) {\n    var medianValue = median(x);\n    var medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (var i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\n/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP\'s array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n    // a list of result chunks, as arrays in an array\n    var output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we\'ll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error("chunk size must be a positive number");\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error("chunk size must be an integer");\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (var start = 0; start < x.length; start += chunkSize) {\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\n/**\n * Sampling with replacement is a type of sampling that allows the same\n * item to be picked out of a population more than once.\n *\n * @param {Array<*>} x an array of any kind of value\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} n sampled items from the population\n * @example\n * var values = [1, 2, 3, 4];\n * sampleWithReplacement(values, 2); // returns 2 random values, like [2, 4];\n */\nfunction sampleWithReplacement(x, n, randomSource) {\n    if (x.length === 0) {\n        return [];\n    }\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    var length = x.length;\n    var sample = [];\n\n    for (var i = 0; i < n; i++) {\n        var index = Math.floor(randomSource() * length);\n\n        sample.push(x[index]);\n    }\n\n    return sample;\n}\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(x, randomSource) {\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the x to determine\n    // when no elements remain to shuffle.\n    var length = x.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    var temporary;\n\n    // The index to swap at each stage.\n    var index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // choose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we\'ll move temporarily\n        temporary = x[length];\n\n        // swap the value at `x[length]` with `x[index]`\n        x[length] = x[index];\n        x[index] = temporary;\n    }\n\n    return x;\n}\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle(x, randomSource) {\n    // slice the original array so that it is not modified\n    var sample = x.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample, randomSource);\n}\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n *\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample(x, n, randomSource) {\n    // shuffle the original array using a fisher-yates shuffle\n    var shuffled = shuffle(x, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\n/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    var matrix = [];\n    for (var i = 0; i < columns; i++) {\n        var column = [];\n        for (var j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\n/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(x) {\n    var uniqueValueCount = 0,\n        lastSeenValue;\n    for (var i = 0; i < x.length; i++) {\n        if (i === 0 || x[i] !== lastSeenValue) {\n            lastSeenValue = x[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j, i, sums, sumsOfSquares) {\n    var sji; // s(j, i)\n    if (j > 0) {\n        var muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n        sji =\n            sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n    } else {\n        sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n    }\n    if (sji < 0) {\n        return 0;\n    }\n    return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n    iMin,\n    iMax,\n    cluster,\n    matrix,\n    backtrackMatrix,\n    sums,\n    sumsOfSquares\n) {\n    if (iMin > iMax) {\n        return;\n    }\n\n    // Start at midpoint between iMin and iMax\n    var i = Math.floor((iMin + iMax) / 2);\n\n    matrix[cluster][i] = matrix[cluster - 1][i - 1];\n    backtrackMatrix[cluster][i] = i;\n\n    var jlow = cluster; // the lower end for j\n\n    if (iMin > cluster) {\n        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n    }\n    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n    var jhigh = i - 1; // the upper end for j\n    if (iMax < matrix[0].length - 1) {\n        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n    }\n\n    var sji;\n    var sjlowi;\n    var ssqjlow;\n    var ssqj;\n    for (var j = jhigh; j >= jlow; --j) {\n        sji = ssq(j, i, sums, sumsOfSquares);\n\n        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n            break;\n        }\n\n        // Examine the lower bound of the cluster border\n        sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n        if (ssqjlow < matrix[cluster][i]) {\n            // Shrink the lower bound\n            matrix[cluster][i] = ssqjlow;\n            backtrackMatrix[cluster][i] = jlow;\n        }\n        jlow++;\n\n        ssqj = sji + matrix[cluster - 1][j - 1];\n        if (ssqj < matrix[cluster][i]) {\n            matrix[cluster][i] = ssqj;\n            backtrackMatrix[cluster][i] = j;\n        }\n    }\n\n    fillMatrixColumn(\n        iMin,\n        i - 1,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n    fillMatrixColumn(\n        i + 1,\n        iMax,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices(data, matrix, backtrackMatrix) {\n    var nValues = matrix[0].length;\n\n    // Shift values by the median to improve numeric stability\n    var shift = data[Math.floor(nValues / 2)];\n\n    // Cumulative sum and cumulative sum of squares for all values in data array\n    var sums = [];\n    var sumsOfSquares = [];\n\n    // Initialize first column in matrix & backtrackMatrix\n    for (var i = 0, shiftedValue = (void 0); i < nValues; ++i) {\n        shiftedValue = data[i] - shift;\n        if (i === 0) {\n            sums.push(shiftedValue);\n            sumsOfSquares.push(shiftedValue * shiftedValue);\n        } else {\n            sums.push(sums[i - 1] + shiftedValue);\n            sumsOfSquares.push(\n                sumsOfSquares[i - 1] + shiftedValue * shiftedValue\n            );\n        }\n\n        // Initialize for cluster = 0\n        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n        backtrackMatrix[0][i] = 0;\n    }\n\n    // Initialize the rest of the columns\n    var iMin;\n    for (var cluster = 1; cluster < matrix.length; ++cluster) {\n        if (cluster < matrix.length - 1) {\n            iMin = cluster;\n        } else {\n            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n            iMin = nValues - 1;\n        }\n\n        fillMatrixColumn(\n            iMin,\n            nValues - 1,\n            cluster,\n            matrix,\n            backtrackMatrix,\n            sums,\n            sumsOfSquares\n        );\n    }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} x input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(x, nClusters) {\n    if (nClusters > x.length) {\n        throw new Error(\n            "cannot generate more classes than there are data values"\n        );\n    }\n\n    var sorted = numericSort(x);\n    // we\'ll use this as the maximum number of clusters\n    var uniqueCount = uniqueCountSorted(sorted);\n\n    // if all of the input values are identical, there\'s one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named \'S\' originally\n    var matrix = makeMatrix(nClusters, sorted.length);\n    // named \'J\' originally\n    var backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It\'s similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n    fillMatrices(sorted, matrix, backtrackMatrix);\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they\'re generated we can solve for the best clustering groups\n    // very quickly.\n    var clusters = [];\n    var clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (var cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n        var clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\n/*\n * Pull Breaks Values for Jenks\n *\n * the second part of the jenks recipe: take the calculated matrices\n * and derive an array of n breaks.\n *\n * @private\n */\nfunction jenksBreaks(data, lowerClassLimits, nClasses) {\n    var k = data.length;\n    var kclass = [];\n    var countNum = nClasses;\n\n    // the calculation of classes will never include the upper\n    // bound, so we need to explicitly set it\n    kclass[nClasses] = data[data.length - 1];\n\n    // the lowerClassLimits matrix is used as indices into itself\n    // here: the `k` variable is reused in each iteration.\n    while (countNum > 0) {\n        kclass[countNum - 1] = data[lowerClassLimits[k][countNum] - 1];\n        k = lowerClassLimits[k][countNum] - 1;\n        countNum--;\n    }\n\n    return kclass;\n}\n\n/*\n * Compute Matrices for Jenks\n *\n * Compute the matrices required for Jenks breaks. These matrices\n * can be used for any classing of data with `classes <= nClasses`\n *\n * @private\n */\nfunction jenksMatrices(data, nClasses) {\n    // in the original implementation, these matrices are referred to\n    // as `LC` and `OP`\n    //\n    // * lowerClassLimits (LC): optimal lower class limits\n    // * varianceCombinations (OP): optimal variance combinations for all classes\n    var lowerClassLimits = [];\n    var varianceCombinations = [];\n    // loop counters\n    var i, j;\n    // the variance, as computed at each step in the calculation\n    var variance = 0;\n\n    // Initialize and fill each matrix with zeroes\n    for (i = 0; i < data.length + 1; i++) {\n        var tmp1 = [];\n        var tmp2 = [];\n        // despite these arrays having the same values, we need\n        // to keep them separate so that changing one does not change\n        // the other\n        for (j = 0; j < nClasses + 1; j++) {\n            tmp1.push(0);\n            tmp2.push(0);\n        }\n        lowerClassLimits.push(tmp1);\n        varianceCombinations.push(tmp2);\n    }\n\n    for (i = 1; i < nClasses + 1; i++) {\n        lowerClassLimits[1][i] = 1;\n        varianceCombinations[1][i] = 0;\n        // in the original implementation, 9999999 is used but\n        // since Javascript has `Infinity`, we use that.\n        for (j = 2; j < data.length + 1; j++) {\n            varianceCombinations[j][i] = Infinity;\n        }\n    }\n\n    for (var l = 2; l < data.length + 1; l++) {\n        // `SZ` originally. this is the sum of the values seen thus\n        // far when calculating variance.\n        var sum = 0;\n        // `ZSQ` originally. the sum of squares of values seen\n        // thus far\n        var sumSquares = 0;\n        // `WT` originally. This is the number of\n        var w = 0;\n        // `IV` originally\n        var i4 = 0;\n\n        // in several instances, you could say `Math.pow(x, 2)`\n        // instead of `x * x`, but this is slower in some browsers\n        // introduces an unnecessary concept.\n        for (var m = 1; m < l + 1; m++) {\n            // `III` originally\n            var lowerClassLimit = l - m + 1;\n            var val = data[lowerClassLimit - 1];\n\n            // here we\'re estimating variance for each potential classing\n            // of the data, for each potential number of classes. `w`\n            // is the number of data points considered so far.\n            w++;\n\n            // increase the current sum and sum-of-squares\n            sum += val;\n            sumSquares += val * val;\n\n            // the variance at this point in the sequence is the difference\n            // between the sum of squares and the total x 2, over the number\n            // of samples.\n            variance = sumSquares - (sum * sum) / w;\n\n            i4 = lowerClassLimit - 1;\n\n            if (i4 !== 0) {\n                for (j = 2; j < nClasses + 1; j++) {\n                    // if adding this element to an existing class\n                    // will increase its variance beyond the limit, break\n                    // the class at this point, setting the `lowerClassLimit`\n                    // at this point.\n                    if (\n                        varianceCombinations[l][j] >=\n                        variance + varianceCombinations[i4][j - 1]\n                    ) {\n                        lowerClassLimits[l][j] = lowerClassLimit;\n                        varianceCombinations[l][j] =\n                            variance + varianceCombinations[i4][j - 1];\n                    }\n                }\n            }\n        }\n\n        lowerClassLimits[l][1] = 1;\n        varianceCombinations[l][1] = variance;\n    }\n\n    // return the two matrices. for just providing breaks, only\n    // `lowerClassLimits` is needed, but variances can be useful to\n    // evaluate goodness of fit.\n    return {\n        lowerClassLimits: lowerClassLimits,\n        varianceCombinations: varianceCombinations\n    };\n}\n\n/**\n * The **[jenks natural breaks optimization](http://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization)**\n * is an algorithm commonly used in cartography and visualization to decide\n * upon groupings of data values that minimize variance within themselves\n * and maximize variation between themselves.\n *\n * For instance, cartographers often use jenks in order to choose which\n * values are assigned to which colors in a [choropleth](https://en.wikipedia.org/wiki/Choropleth_map)\n * map.\n *\n * @param {Array<number>} data input data, as an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * // split data into 3 break points\n * jenks([1, 2, 4, 5, 7, 9, 10, 20], 3) // = [1, 7, 20, 20]\n */\nfunction jenks(data, nClasses) {\n    if (nClasses > data.length) {\n        return null;\n    }\n\n    // sort data in numerical order, since this is expected\n    // by the matrices function\n    data = data.slice().sort(function (a, b) {\n        return a - b;\n    });\n\n    // get our basic matrices\n    var matrices = jenksMatrices(data, nClasses);\n    // we only need lower class limits here\n    var lowerClassLimits = matrices.lowerClassLimits;\n\n    // extract nClasses out of the computed matrices\n    return jenksBreaks(data, lowerClassLimits, nClasses);\n}\n\n/**\n * Given an array of x, this will find the extent of the\n * x and return an array of breaks that can be used\n * to categorize the x into a number of classes. The\n * returned array will always be 1 longer than the number of\n * classes because it includes the minimum value.\n *\n * @param {Array<number>} x an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * @example\n * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); // => [1, 2.25, 3.5, 4.75, 6]\n */\nfunction equalIntervalBreaks(x, nClasses) {\n    if (x.length < 2) {\n        return x;\n    }\n\n    var theMin = min(x);\n    var theMax = max(x);\n\n    // the first break will always be the minimum value\n    // in the xset\n    var breaks = [theMin];\n\n    // The size of each break is the full range of the x\n    // divided by the number of classes requested\n    var breakSize = (theMax - theMin) / nClasses;\n\n    // In the case of nClasses = 1, this loop won\'t run\n    // and the returned breaks will be [min, max]\n    for (var i = 1; i < nClasses; i++) {\n        breaks.push(breaks[0] + breakSize * i);\n    }\n\n    // the last break will always be the\n    // maximum.\n    breaks.push(theMax);\n\n    return breaks;\n}\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_covariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x a sample of two or more data points\n * @param {Array<number>} y a sample of two or more data points\n * @throws {Error} if x and y do not have equal lengths\n * @throws {Error} if x or y have length of one or less\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\nfunction sampleCovariance(x, y) {\n    // The two datasets must have the same length which must be more than 1\n    if (x.length !== y.length) {\n        throw new Error("sampleCovariance requires samples with equal lengths");\n    }\n\n    if (x.length < 2) {\n        throw new Error(\n            "sampleCovariance requires at least two data points in each sample"\n        );\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    var xmean = mean(x);\n    var ymean = mean(y);\n    var sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (var i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels\' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel\'s Correction](https://en.wikipedia.org/wiki/Bessel\'s_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don\'t know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x a sample of two or more data points\n * @throws {Error} if the length of x is less than 2\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\nfunction sampleVariance(x) {\n    if (x.length < 2) {\n        throw new Error("sampleVariance requires at least two data points");\n    }\n\n    var sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels\' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\n/**\n * The [sample standard deviation](http://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation)\n * is the square root of the sample variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => \'2.14\'\n */\nfunction sampleStandardDeviation(x) {\n    var sampleVarianceX = sampleVariance(x);\n    return Math.sqrt(sampleVarianceX);\n}\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => \'0.69\'\n */\nfunction sampleCorrelation(x, y) {\n    var cov = sampleCovariance(x, y);\n    var xstd = sampleStandardDeviation(x);\n    var ystd = sampleStandardDeviation(y);\n\n    return cov / xstd / ystd;\n}\n\n/**\n * The [rank correlation](https://en.wikipedia.org/wiki/Rank_correlation) is\n * a measure of the strength of monotonic relationship between two arrays\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample rank correlation\n */\nfunction sampleRankCorrelation(x, y) {\n    var xIndexes = x\n        .map(function (value, index) { return [value, index]; })\n        .sort(function (a, b) { return a[0] - b[0]; })\n        .map(function (pair) { return pair[1]; });\n    var yIndexes = y\n        .map(function (value, index) { return [value, index]; })\n        .sort(function (a, b) { return a[0] - b[0]; })\n        .map(function (pair) { return pair[1]; });\n\n    // At this step, we have an array of indexes\n    // that map from sorted numbers to their original indexes. We reverse\n    // that so that it is an array of the sorted destination index.\n    var xRanks = Array(xIndexes.length);\n    var yRanks = Array(xIndexes.length);\n    for (var i = 0; i < xIndexes.length; i++) {\n        xRanks[xIndexes[i]] = i;\n        yRanks[yIndexes[i]] = i;\n    }\n\n    return sampleCorrelation(xRanks, yRanks);\n}\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable "leans" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @since 4.1.0\n * @param {Array<number>} x a sample of 3 or more data points\n * @returns {number} sample skewness\n * @throws {Error} if x has length less than 3\n * @example\n * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365\n */\nfunction sampleSkewness(x) {\n    if (x.length < 3) {\n        throw new Error("sampleSkewness requires at least three data points");\n    }\n\n    var meanValue = mean(x);\n    var tempValue;\n    var sumSquaredDeviations = 0;\n    var sumCubedDeviations = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        tempValue = x[i] - meanValue;\n        sumSquaredDeviations += tempValue * tempValue;\n        sumCubedDeviations += tempValue * tempValue * tempValue;\n    }\n\n    // this is Bessels\' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    var besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    var theSampleStandardDeviation = Math.sqrt(\n        sumSquaredDeviations / besselsCorrection\n    );\n\n    var n = x.length;\n    var cubedS = Math.pow(theSampleStandardDeviation, 3);\n\n    return (n * sumCubedDeviations) / ((n - 1) * (n - 2) * cubedS);\n}\n\n/**\n * [Kurtosis](http://en.wikipedia.org/wiki/Kurtosis) is\n * a measure of the heaviness of a distribution\'s tails relative to its\n * variance. The kurtosis value can be positive or negative, or even undefined.\n *\n * Implementation is based on Fisher\'s excess kurtosis definition and uses\n * unbiased moment estimators. This is the version found in Excel and available\n * in several statistical packages, including SAS and SciPy.\n *\n * @param {Array<number>} x a sample of 4 or more data points\n * @returns {number} sample kurtosis\n * @throws {Error} if x has length less than 4\n * @example\n * sampleKurtosis([1, 2, 2, 3, 5]); // => 1.4555765595463122\n */\nfunction sampleKurtosis(x) {\n    var n = x.length;\n\n    if (n < 4) {\n        throw new Error("sampleKurtosis requires at least four data points");\n    }\n\n    var meanValue = mean(x);\n    var tempValue;\n    var secondCentralMoment = 0;\n    var fourthCentralMoment = 0;\n\n    for (var i = 0; i < n; i++) {\n        tempValue = x[i] - meanValue;\n        secondCentralMoment += tempValue * tempValue;\n        fourthCentralMoment += tempValue * tempValue * tempValue * tempValue;\n    }\n\n    return (\n        ((n - 1) / ((n - 2) * (n - 3))) *\n        ((n * (n + 1) * fourthCentralMoment) /\n            (secondCentralMoment * secondCentralMoment) -\n            3 * (n - 1))\n    );\n}\n\n/**\n * Implementation of [Heap\'s Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n    var indexes = new Array(elements.length);\n    var permutations = [elements.slice()];\n\n    for (var i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (var i$1 = 0; i$1 < elements.length; ) {\n        if (indexes[i$1] < i$1) {\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            var swapFrom = 0;\n            if (i$1 % 2 !== 0) {\n                swapFrom = indexes[i$1];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            var temp = elements[swapFrom];\n            elements[swapFrom] = elements[i$1];\n            elements[i$1] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i$1]++;\n            i$1 = 0;\n        } else {\n            indexes[i$1] = 0;\n            i$1++;\n        }\n    }\n\n    return permutations;\n}\n\n/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n    var i;\n    var subI;\n    var combinationList = [];\n    var subsetCombinations;\n    var next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]]);\n        } else {\n            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\n/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * \'With replacement\' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn\'t matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n    var combinationList = [];\n\n    for (var i = 0; i < x.length; i++) {\n        if (k === 1) {\n            // If we\'re requested to find only one element, we don\'t need\n            // to recurse: just push `x[i]` onto the list of combinations.\n            combinationList.push([x[i]]);\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we\'re\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `x[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            var subsetCombinations = combinationsReplacement(\n                x.slice(i, x.length),\n                k - 1\n            );\n\n            for (var j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([x[i]].concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\n/**\n * When adding a new value to a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the new\n * value to add.\n *\n * @since 2.5.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} newValue the added value\n * @returns {number} the new mean\n *\n * @example\n * addToMean(14, 5, 53); // => 20.5\n */\nfunction addToMean(mean, n, newValue) {\n    return mean + (newValue - mean) / (n + 1);\n}\n\n/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\nfunction combineMeans(mean1, n1, mean2, n2) {\n    return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\nfunction combineVariances(variance1, mean1, n1, variance2, mean2, n2) {\n    var newMean = combineMeans(mean1, n1, mean2, n2);\n\n    return (\n        (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +\n            n2 * (variance2 + Math.pow(mean2 - newMean, 2))) /\n        (n1 + n2)\n    );\n}\n\n/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = ss.geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x) {\n    if (x.length === 0) {\n        throw new Error("geometricMean requires at least one data point");\n    }\n\n    // the starting value.\n    var value = 1;\n\n    for (var i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] < 0) {\n            throw new Error(\n                "geometricMean requires only non-negative numbers as input"\n            );\n        }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\n/**\n * The [log average](https://en.wikipedia.org/wiki/https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms)\n * is an equivalent way of computing the geometric mean of an array suitable for large or small products.\n *\n * It\'s found by calculating the average logarithm of the elements and exponentiating.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n */\nfunction logAverage(x) {\n    if (x.length === 0) {\n        throw new Error("logAverage requires at least one data point");\n    }\n\n    var value = 0;\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] < 0) {\n            throw new Error(\n                "logAverage requires only non-negative numbers as input"\n            );\n        }\n        value += Math.log(x[i]);\n    }\n\n    return Math.exp(value / x.length);\n}\n\n/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} harmonic mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * harmonicMean([2, 3]).toFixed(2) // => \'2.40\'\n */\nfunction harmonicMean(x) {\n    if (x.length === 0) {\n        throw new Error("harmonicMean requires at least one data point");\n    }\n\n    var reciprocalSum = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) {\n            throw new Error(\n                "harmonicMean requires only positive numbers as input"\n            );\n        }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The simple mean uses the successive addition method internally\n * to calculate it\'s result. Errors in floating-point addition are\n * not accounted for, so if precision is required, the standard {@link mean}\n * method should be used instead.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction meanSimple(x) {\n    if (x.length === 0) {\n        throw new Error("meanSimple requires at least one data point");\n    }\n\n    return sumSimple(x) / x.length;\n}\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of \'the middle\'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn\'t necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} sorted input\n * @returns {number} median value\n * @example\n * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5\n */\nfunction medianSorted(sorted) {\n    return quantileSorted(sorted, 0.5);\n}\n\n/**\n * When removing a value from a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the value to remove.\n *\n * @since 3.0.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} value the value to remove\n * @returns {number} the new mean\n *\n * @example\n * subtractFromMean(20.5, 6, 53); // => 14\n */\nfunction subtractFromMean(mean, n, value) {\n    return (mean * n - value) / (n - 1);\n}\n\n/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x a sample of one or more data points\n * @returns {number} root mean square\n * @throws {Error} if x is empty\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); // => 1\n */\nfunction rootMeanSquare(x) {\n    if (x.length === 0) {\n        throw new Error("rootMeanSquare requires at least one data point");\n    }\n\n    var sumOfSquares = 0;\n    for (var i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\n/**\n * The`coefficient of variation`_ is the ratio of the standard deviation to the mean.\n * .._`coefficient of variation`: https://en.wikipedia.org/wiki/Coefficient_of_variation\n *\n *\n * @param {Array} x input\n * @returns {number} coefficient of variation\n * @example\n * coefficientOfVariation([1, 2, 3, 4]).toFixed(3); // => 0.516\n * coefficientOfVariation([1, 2, 3, 4, 5]).toFixed(3); // => 0.527\n * coefficientOfVariation([-1, 0, 1, 2, 3, 4]).toFixed(3); // => 1.247\n */\nfunction coefficientOfVariation(x) {\n    return sampleStandardDeviation(x) / mean(x);\n}\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we\'re trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} expectedValue expected value of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => \'0.16\'\n */\nfunction tTest(x, expectedValue) {\n    // The mean of the sample\n    var sampleMean = mean(x);\n\n    // The standard deviation of the sample\n    var sd = standardDeviation(x);\n\n    // Square root the length of the sample\n    var rootN = Math.sqrt(x.length);\n\n    // returning the t value\n    return (sampleMean - expectedValue) / (sd / rootN);\n}\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student\'s_t-test).\n * Tests whether "mean(X)-mean(Y) = difference", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to reject](https://en.wikipedia.org/wiki/Exclusion_of_the_null_hypothesis)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number|null} test result\n *\n * @example\n * tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); // => -2.1908902300206643\n */\nfunction tTestTwoSample(sampleX, sampleY, difference) {\n    var n = sampleX.length;\n    var m = sampleY.length;\n\n    // If either sample doesn\'t actually have any values, we can\'t\n    // compute this at all, so we return `null`.\n    if (!n || !m) {\n        return null;\n    }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    var meanX = mean(sampleX);\n    var meanY = mean(sampleY);\n    var sampleVarianceX = sampleVariance(sampleX);\n    var sampleVarianceY = sampleVariance(sampleY);\n\n    if (\n        typeof meanX === "number" &&\n        typeof meanY === "number" &&\n        typeof sampleVarianceX === "number" &&\n        typeof sampleVarianceY === "number"\n    ) {\n        var weightedVariance =\n            ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) /\n            (n + m - 2);\n\n        return (\n            (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m))\n        );\n    }\n}\n\n/**\n * This function calculates the Wilcoxon rank sum statistic for the first sample\n * with respect to the second. The Wilcoxon rank sum test is a non-parametric\n * alternative to the t-test which is equivalent to the\n * [Mann-Whitney U test](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test).\n * The statistic is calculated by pooling all the observations together, ranking them,\n * and then summing the ranks associated with one of the samples. If this rank sum is\n * sufficiently large or small we reject the hypothesis that the two samples come\n * from the same distribution in favor of the alternative that one is shifted with\n * respect to the other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @returns {number} rank sum for sampleX\n *\n * @example\n * wilcoxonRankSum([1, 4, 8], [9, 12, 15]); // => 6\n */\nfunction wilcoxonRankSum(sampleX, sampleY) {\n    if (!sampleX.length || !sampleY.length) {\n        throw new Error("Neither sample can be empty");\n    }\n\n    var pooledSamples = sampleX\n        .map(function (x) { return ({ label: "x", value: x }); })\n        .concat(sampleY.map(function (y) { return ({ label: "y", value: y }); }))\n        .sort(function (a, b) { return a.value - b.value; });\n\n    for (var rank = 0; rank < pooledSamples.length; rank++) {\n        pooledSamples[rank].rank = rank;\n    }\n\n    var tiedRanks = [pooledSamples[0].rank];\n    for (var i = 1; i < pooledSamples.length; i++) {\n        if (pooledSamples[i].value === pooledSamples[i - 1].value) {\n            tiedRanks.push(pooledSamples[i].rank);\n            if (i === pooledSamples.length - 1) {\n                replaceRanksInPlace(pooledSamples, tiedRanks);\n            }\n        } else if (tiedRanks.length > 1) {\n            replaceRanksInPlace(pooledSamples, tiedRanks);\n        } else {\n            tiedRanks = [pooledSamples[i].rank];\n        }\n    }\n\n    function replaceRanksInPlace(pooledSamples, tiedRanks) {\n        var average = (tiedRanks[0] + tiedRanks[tiedRanks.length - 1]) / 2;\n        for (var i = 0; i < tiedRanks.length; i++) {\n            pooledSamples[tiedRanks[i]].rank = average;\n        }\n    }\n\n    var rankSum = 0;\n\n    for (var i$1 = 0; i$1 < pooledSamples.length; i$1++) {\n        var sample = pooledSamples[i$1];\n        if (sample.label === "x") {\n            rankSum += sample.rank + 1;\n        }\n    }\n\n    return rankSum;\n}\n\n/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naïve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: \'Cat\'\n * }, \'animal\');\n * var result = bayes.score({\n *   species: \'Cat\'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nvar BayesianClassifier = function BayesianClassifier() {\n    // The number of items that are currently\n    // classified in the model\n    this.totalCount = 0;\n    // Every item classified in the model\n    this.data = {};\n};\n\n/**\n * Train the classifier with a new item, which has a single\n * dimension of Javascript literal keys and values.\n *\n * @param {Object} item an object with singly-deep properties\n * @param {string} category the category this item belongs to\n * @return {undefined} adds the item to the classifier\n */\nBayesianClassifier.prototype.train = function train (item, category) {\n    // If the data object doesn\'t have any values\n    // for this category, create a new object for it.\n    if (!this.data[category]) {\n        this.data[category] = {};\n    }\n\n    // Iterate through each key in the item.\n    for (var k in item) {\n        var v = item[k];\n        // Initialize the nested object `data[category][k][item[k]]`\n        // with an object of keys that equal 0.\n        if (this.data[category][k] === undefined) {\n            this.data[category][k] = {};\n        }\n        if (this.data[category][k][v] === undefined) {\n            this.data[category][k][v] = 0;\n        }\n\n        // And increment the key for this key/value combination.\n        this.data[category][k][v]++;\n    }\n\n    // Increment the number of items classified\n    this.totalCount++;\n};\n\n/**\n * Generate a score of how well this item matches all\n * possible categories based on its attributes\n *\n * @param {Object} item an item in the same format as with train\n * @returns {Object} of probabilities that this item belongs to a\n * given category.\n */\nBayesianClassifier.prototype.score = function score (item) {\n    // Initialize an empty array of odds per category.\n    var odds = {};\n    var category;\n    // Iterate through each key in the item,\n    // then iterate through each category that has been used\n    // in previous calls to `.train()`\n    for (var k in item) {\n        var v = item[k];\n        for (category in this.data) {\n            // Create an empty object for storing key - value combinations\n            // for this category.\n            odds[category] = {};\n\n            // If this item doesn\'t even have a property, it counts for nothing,\n            // but if it does have the property that we\'re looking for from\n            // the item to categorize, it counts based on how popular it is\n            // versus the whole population.\n            if (this.data[category][k]) {\n                odds[category][k + "_" + v] =\n                    (this.data[category][k][v] || 0) / this.totalCount;\n            } else {\n                odds[category][k + "_" + v] = 0;\n            }\n        }\n    }\n\n    // Set up a new object that will contain sums of these odds by category\n    var oddsSums = {};\n\n    for (category in odds) {\n        // Tally all of the odds for each category-combination pair -\n        // the non-existence of a category does not add anything to the\n        // score.\n        oddsSums[category] = 0;\n        for (var combination in odds[category]) {\n            oddsSums[category] += odds[category][combination];\n        }\n    }\n\n    return oddsSums;\n};\n\n/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nvar PerceptronModel = function PerceptronModel() {\n    // The weights, or coefficients of the model;\n    // weights are only populated when training with data.\n    this.weights = [];\n    // The bias term, or intercept; it is also a weight but\n    // it\'s stored separately for convenience as it is always\n    // multiplied by one.\n    this.bias = 0;\n};\n/**\n * **Predict**: Use an array of features with the weight array and bias\n * to predict whether an example is labeled 0 or 1.\n *\n * @param {Array<number>} features an array of features as numbers\n * @returns {number} 1 if the score is over 0, otherwise 0\n */\nPerceptronModel.prototype.predict = function predict (features) {\n    // Only predict if previously trained\n    // on the same size feature array(s).\n    if (features.length !== this.weights.length) {\n        return null;\n    }\n\n    // Calculate the sum of features times weights,\n    // with the bias added (implicitly times one).\n    var score = 0;\n    for (var i = 0; i < this.weights.length; i++) {\n        score += this.weights[i] * features[i];\n    }\n    score += this.bias;\n\n    // Classify as 1 if the score is over 0, otherwise 0.\n    if (score > 0) {\n        return 1;\n    } else {\n        return 0;\n    }\n};\n\n/**\n * **Train** the classifier with a new example, which is\n * a numeric array of features and a 0 or 1 label.\n *\n * @param {Array<number>} features an array of features as numbers\n * @param {number} label either 0 or 1\n * @returns {PerceptronModel} this\n */\nPerceptronModel.prototype.train = function train (features, label) {\n    // Require that only labels of 0 or 1 are considered.\n    if (label !== 0 && label !== 1) {\n        return null;\n    }\n    // The length of the feature array determines\n    // the length of the weight array.\n    // The perceptron will continue learning as long as\n    // it keeps seeing feature arrays of the same length.\n    // When it sees a new data shape, it initializes.\n    if (features.length !== this.weights.length) {\n        this.weights = features;\n        this.bias = 1;\n    }\n    // Make a prediction based on current weights.\n    var prediction = this.predict(features);\n    // Update the weights if the prediction is wrong.\n    if (typeof prediction === "number" && prediction !== label) {\n        var gradient = label - prediction;\n        for (var i = 0; i < this.weights.length; i++) {\n            this.weights[i] += gradient * features[i];\n        }\n        this.bias += gradient;\n    }\n    return this;\n};\n\n/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we\'re "close enough". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we\'re trying to find a local minimum of a function\'s derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of \'close enough\'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log(\'Local minimum occurs at\', x_new);\n */\nvar epsilon = 0.0001;\n\n/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error("factorial requires a non-negative value");\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error("factorial requires an integer input");\n    }\n\n    // typically you\'ll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    var accumulator = 1;\n    for (var i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\n/**\n * Compute the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Nemes\' approximation.\n * The gamma of n is equivalent to (n-1)!, but unlike the factorial function, gamma is defined for all real n except zero\n * and negative integers (where NaN is returned). Note, the gamma function is also well-defined for complex numbers,\n * though this implementation currently does not handle complex numbers as input values.\n * Nemes\' approximation is defined [here](https://arxiv.org/abs/1003.6020) as Theorem 2.2.\n * Negative values use [Euler\'s reflection formula](https://en.wikipedia.org/wiki/Gamma_function#Properties) for computation.\n *\n * @param {number} n Any real number except for zero and negative integers.\n * @returns {number} The gamma of the input value.\n *\n * @example\n * gamma(11.5); // 11899423.084037038\n * gamma(-11.5); // 2.29575810481609e-8\n * gamma(5); // 24\n */\nfunction gamma(n) {\n    if (Number.isInteger(n)) {\n        if (n <= 0) {\n            // gamma not defined for zero or negative integers\n            return NaN;\n        } else {\n            // use factorial for integer inputs\n            return factorial(n - 1);\n        }\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    if (n < 0) {\n        // Use Euler\'s reflection formula for negative inputs\n        // see:  https://en.wikipedia.org/wiki/Gamma_function#Properties\n        return Math.PI / (Math.sin(Math.PI * -n) * gamma(-n));\n    } else {\n        // Nemes\' expansion approximation\n        var seriesCoefficient =\n            Math.pow(n / Math.E, n) * Math.sqrt(2 * Math.PI * (n + 1 / 6));\n\n        var seriesDenom = n + 1 / 4;\n\n        var seriesExpansion =\n            1 +\n            1 / 144 / Math.pow(seriesDenom, 2) -\n            1 / 12960 / Math.pow(seriesDenom, 3) -\n            257 / 207360 / Math.pow(seriesDenom, 4) -\n            52 / 2612736 / Math.pow(seriesDenom, 5) +\n            5741173 / 9405849600 / Math.pow(seriesDenom, 6) +\n            37529 / 18811699200 / Math.pow(seriesDenom, 7);\n\n        return seriesCoefficient * seriesExpansion;\n    }\n}\n\n// Define series coefficients\nvar COEFFICIENTS = [\n    0.99999999999999709182, 57.156235665862923517, -59.597960355475491248,\n    14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4,\n    0.46523628927048575665e-4, -0.98374475304879564677e-4,\n    0.15808870322491248884e-3, -0.21026444172410488319e-3,\n    0.2174396181152126432e-3, -0.16431810653676389022e-3,\n    0.84418223983852743293e-4, -0.2619083840158140867e-4,\n    0.36899182659531622704e-5\n];\n\nvar g = 607 / 128;\nvar LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos\' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo\'s Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n    // Return infinity if value not in domain\n    if (n <= 0) {\n        return Infinity;\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    // Create series approximation\n    var a = COEFFICIENTS[0];\n\n    for (var i = 1; i < 15; i++) {\n        a += COEFFICIENTS[i] / (n + i);\n    }\n\n    var tmp = g + 0.5 + n;\n\n    // Return natural logarithm of gamma(n)\n    return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\n\n/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where "1" is defined to mean "heads" and "0" is defined\n * to mean "tails" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number[]} values of bernoulli distribution at this point\n * @throws {Error} if p is outside 0 and 1\n * @example\n * bernoulliDistribution(0.3); // => [0.7, 0.3]\n */\nfunction bernoulliDistribution(p) /*: number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n    if (p < 0 || p > 1) {\n        throw new Error(\n            "bernoulliDistribution requires probability to be between 0 and 1 inclusive"\n        );\n    }\n\n    return [1 - p, p];\n}\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we\'ll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    var x = 0;\n    var cumulativeProbability = 0;\n    var cells = [];\n    var binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we\'ve defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] =\n            binomialCoefficient *\n            Math.pow(probability, x) *\n            Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = (binomialCoefficient * (trials - x + 1)) / x;\n        // when the cumulativeProbability is nearly 1, we\'ve calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\nfunction poissonDistribution(lambda) /*: ?number[] */ {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) {\n        return undefined;\n    }\n\n    // our current place in the distribution\n    var x = 0;\n    // and we keep track of the current cumulative probability, in\n    // order to know when to stop calculating chances.\n    var cumulativeProbability = 0;\n    // the calculated cells to be returned\n    var cells = [];\n    var factorialX = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we\'ve defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.exp(-lambda) * Math.pow(lambda, x)) / factorialX;\n        cumulativeProbability += cells[x];\n        x++;\n        factorialX *= x;\n        // when the cumulativeProbability is nearly 1, we\'ve calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\n/**\n * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n *\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, "Probability and Statistics in\n * Engineering and Management Science", Wiley (1980).\n */\nvar chiSquaredDistributionTable = {\n    1: {\n        0.995: 0,\n        0.99: 0,\n        0.975: 0,\n        0.95: 0,\n        0.9: 0.02,\n        0.5: 0.45,\n        0.1: 2.71,\n        0.05: 3.84,\n        0.025: 5.02,\n        0.01: 6.63,\n        0.005: 7.88\n    },\n    2: {\n        0.995: 0.01,\n        0.99: 0.02,\n        0.975: 0.05,\n        0.95: 0.1,\n        0.9: 0.21,\n        0.5: 1.39,\n        0.1: 4.61,\n        0.05: 5.99,\n        0.025: 7.38,\n        0.01: 9.21,\n        0.005: 10.6\n    },\n    3: {\n        0.995: 0.07,\n        0.99: 0.11,\n        0.975: 0.22,\n        0.95: 0.35,\n        0.9: 0.58,\n        0.5: 2.37,\n        0.1: 6.25,\n        0.05: 7.81,\n        0.025: 9.35,\n        0.01: 11.34,\n        0.005: 12.84\n    },\n    4: {\n        0.995: 0.21,\n        0.99: 0.3,\n        0.975: 0.48,\n        0.95: 0.71,\n        0.9: 1.06,\n        0.5: 3.36,\n        0.1: 7.78,\n        0.05: 9.49,\n        0.025: 11.14,\n        0.01: 13.28,\n        0.005: 14.86\n    },\n    5: {\n        0.995: 0.41,\n        0.99: 0.55,\n        0.975: 0.83,\n        0.95: 1.15,\n        0.9: 1.61,\n        0.5: 4.35,\n        0.1: 9.24,\n        0.05: 11.07,\n        0.025: 12.83,\n        0.01: 15.09,\n        0.005: 16.75\n    },\n    6: {\n        0.995: 0.68,\n        0.99: 0.87,\n        0.975: 1.24,\n        0.95: 1.64,\n        0.9: 2.2,\n        0.5: 5.35,\n        0.1: 10.65,\n        0.05: 12.59,\n        0.025: 14.45,\n        0.01: 16.81,\n        0.005: 18.55\n    },\n    7: {\n        0.995: 0.99,\n        0.99: 1.25,\n        0.975: 1.69,\n        0.95: 2.17,\n        0.9: 2.83,\n        0.5: 6.35,\n        0.1: 12.02,\n        0.05: 14.07,\n        0.025: 16.01,\n        0.01: 18.48,\n        0.005: 20.28\n    },\n    8: {\n        0.995: 1.34,\n        0.99: 1.65,\n        0.975: 2.18,\n        0.95: 2.73,\n        0.9: 3.49,\n        0.5: 7.34,\n        0.1: 13.36,\n        0.05: 15.51,\n        0.025: 17.53,\n        0.01: 20.09,\n        0.005: 21.96\n    },\n    9: {\n        0.995: 1.73,\n        0.99: 2.09,\n        0.975: 2.7,\n        0.95: 3.33,\n        0.9: 4.17,\n        0.5: 8.34,\n        0.1: 14.68,\n        0.05: 16.92,\n        0.025: 19.02,\n        0.01: 21.67,\n        0.005: 23.59\n    },\n    10: {\n        0.995: 2.16,\n        0.99: 2.56,\n        0.975: 3.25,\n        0.95: 3.94,\n        0.9: 4.87,\n        0.5: 9.34,\n        0.1: 15.99,\n        0.05: 18.31,\n        0.025: 20.48,\n        0.01: 23.21,\n        0.005: 25.19\n    },\n    11: {\n        0.995: 2.6,\n        0.99: 3.05,\n        0.975: 3.82,\n        0.95: 4.57,\n        0.9: 5.58,\n        0.5: 10.34,\n        0.1: 17.28,\n        0.05: 19.68,\n        0.025: 21.92,\n        0.01: 24.72,\n        0.005: 26.76\n    },\n    12: {\n        0.995: 3.07,\n        0.99: 3.57,\n        0.975: 4.4,\n        0.95: 5.23,\n        0.9: 6.3,\n        0.5: 11.34,\n        0.1: 18.55,\n        0.05: 21.03,\n        0.025: 23.34,\n        0.01: 26.22,\n        0.005: 28.3\n    },\n    13: {\n        0.995: 3.57,\n        0.99: 4.11,\n        0.975: 5.01,\n        0.95: 5.89,\n        0.9: 7.04,\n        0.5: 12.34,\n        0.1: 19.81,\n        0.05: 22.36,\n        0.025: 24.74,\n        0.01: 27.69,\n        0.005: 29.82\n    },\n    14: {\n        0.995: 4.07,\n        0.99: 4.66,\n        0.975: 5.63,\n        0.95: 6.57,\n        0.9: 7.79,\n        0.5: 13.34,\n        0.1: 21.06,\n        0.05: 23.68,\n        0.025: 26.12,\n        0.01: 29.14,\n        0.005: 31.32\n    },\n    15: {\n        0.995: 4.6,\n        0.99: 5.23,\n        0.975: 6.27,\n        0.95: 7.26,\n        0.9: 8.55,\n        0.5: 14.34,\n        0.1: 22.31,\n        0.05: 25,\n        0.025: 27.49,\n        0.01: 30.58,\n        0.005: 32.8\n    },\n    16: {\n        0.995: 5.14,\n        0.99: 5.81,\n        0.975: 6.91,\n        0.95: 7.96,\n        0.9: 9.31,\n        0.5: 15.34,\n        0.1: 23.54,\n        0.05: 26.3,\n        0.025: 28.85,\n        0.01: 32,\n        0.005: 34.27\n    },\n    17: {\n        0.995: 5.7,\n        0.99: 6.41,\n        0.975: 7.56,\n        0.95: 8.67,\n        0.9: 10.09,\n        0.5: 16.34,\n        0.1: 24.77,\n        0.05: 27.59,\n        0.025: 30.19,\n        0.01: 33.41,\n        0.005: 35.72\n    },\n    18: {\n        0.995: 6.26,\n        0.99: 7.01,\n        0.975: 8.23,\n        0.95: 9.39,\n        0.9: 10.87,\n        0.5: 17.34,\n        0.1: 25.99,\n        0.05: 28.87,\n        0.025: 31.53,\n        0.01: 34.81,\n        0.005: 37.16\n    },\n    19: {\n        0.995: 6.84,\n        0.99: 7.63,\n        0.975: 8.91,\n        0.95: 10.12,\n        0.9: 11.65,\n        0.5: 18.34,\n        0.1: 27.2,\n        0.05: 30.14,\n        0.025: 32.85,\n        0.01: 36.19,\n        0.005: 38.58\n    },\n    20: {\n        0.995: 7.43,\n        0.99: 8.26,\n        0.975: 9.59,\n        0.95: 10.85,\n        0.9: 12.44,\n        0.5: 19.34,\n        0.1: 28.41,\n        0.05: 31.41,\n        0.025: 34.17,\n        0.01: 37.57,\n        0.005: 40\n    },\n    21: {\n        0.995: 8.03,\n        0.99: 8.9,\n        0.975: 10.28,\n        0.95: 11.59,\n        0.9: 13.24,\n        0.5: 20.34,\n        0.1: 29.62,\n        0.05: 32.67,\n        0.025: 35.48,\n        0.01: 38.93,\n        0.005: 41.4\n    },\n    22: {\n        0.995: 8.64,\n        0.99: 9.54,\n        0.975: 10.98,\n        0.95: 12.34,\n        0.9: 14.04,\n        0.5: 21.34,\n        0.1: 30.81,\n        0.05: 33.92,\n        0.025: 36.78,\n        0.01: 40.29,\n        0.005: 42.8\n    },\n    23: {\n        0.995: 9.26,\n        0.99: 10.2,\n        0.975: 11.69,\n        0.95: 13.09,\n        0.9: 14.85,\n        0.5: 22.34,\n        0.1: 32.01,\n        0.05: 35.17,\n        0.025: 38.08,\n        0.01: 41.64,\n        0.005: 44.18\n    },\n    24: {\n        0.995: 9.89,\n        0.99: 10.86,\n        0.975: 12.4,\n        0.95: 13.85,\n        0.9: 15.66,\n        0.5: 23.34,\n        0.1: 33.2,\n        0.05: 36.42,\n        0.025: 39.36,\n        0.01: 42.98,\n        0.005: 45.56\n    },\n    25: {\n        0.995: 10.52,\n        0.99: 11.52,\n        0.975: 13.12,\n        0.95: 14.61,\n        0.9: 16.47,\n        0.5: 24.34,\n        0.1: 34.28,\n        0.05: 37.65,\n        0.025: 40.65,\n        0.01: 44.31,\n        0.005: 46.93\n    },\n    26: {\n        0.995: 11.16,\n        0.99: 12.2,\n        0.975: 13.84,\n        0.95: 15.38,\n        0.9: 17.29,\n        0.5: 25.34,\n        0.1: 35.56,\n        0.05: 38.89,\n        0.025: 41.92,\n        0.01: 45.64,\n        0.005: 48.29\n    },\n    27: {\n        0.995: 11.81,\n        0.99: 12.88,\n        0.975: 14.57,\n        0.95: 16.15,\n        0.9: 18.11,\n        0.5: 26.34,\n        0.1: 36.74,\n        0.05: 40.11,\n        0.025: 43.19,\n        0.01: 46.96,\n        0.005: 49.65\n    },\n    28: {\n        0.995: 12.46,\n        0.99: 13.57,\n        0.975: 15.31,\n        0.95: 16.93,\n        0.9: 18.94,\n        0.5: 27.34,\n        0.1: 37.92,\n        0.05: 41.34,\n        0.025: 44.46,\n        0.01: 48.28,\n        0.005: 50.99\n    },\n    29: {\n        0.995: 13.12,\n        0.99: 14.26,\n        0.975: 16.05,\n        0.95: 17.71,\n        0.9: 19.77,\n        0.5: 28.34,\n        0.1: 39.09,\n        0.05: 42.56,\n        0.025: 45.72,\n        0.01: 49.59,\n        0.005: 52.34\n    },\n    30: {\n        0.995: 13.79,\n        0.99: 14.95,\n        0.975: 16.79,\n        0.95: 18.49,\n        0.9: 20.6,\n        0.5: 29.34,\n        0.1: 40.26,\n        0.05: 43.77,\n        0.025: 46.98,\n        0.01: 50.89,\n        0.005: 53.67\n    },\n    40: {\n        0.995: 20.71,\n        0.99: 22.16,\n        0.975: 24.43,\n        0.95: 26.51,\n        0.9: 29.05,\n        0.5: 39.34,\n        0.1: 51.81,\n        0.05: 55.76,\n        0.025: 59.34,\n        0.01: 63.69,\n        0.005: 66.77\n    },\n    50: {\n        0.995: 27.99,\n        0.99: 29.71,\n        0.975: 32.36,\n        0.95: 34.76,\n        0.9: 37.69,\n        0.5: 49.33,\n        0.1: 63.17,\n        0.05: 67.5,\n        0.025: 71.42,\n        0.01: 76.15,\n        0.005: 79.49\n    },\n    60: {\n        0.995: 35.53,\n        0.99: 37.48,\n        0.975: 40.48,\n        0.95: 43.19,\n        0.9: 46.46,\n        0.5: 59.33,\n        0.1: 74.4,\n        0.05: 79.08,\n        0.025: 83.3,\n        0.01: 88.38,\n        0.005: 91.95\n    },\n    70: {\n        0.995: 43.28,\n        0.99: 45.44,\n        0.975: 48.76,\n        0.95: 51.74,\n        0.9: 55.33,\n        0.5: 69.33,\n        0.1: 85.53,\n        0.05: 90.53,\n        0.025: 95.02,\n        0.01: 100.42,\n        0.005: 104.22\n    },\n    80: {\n        0.995: 51.17,\n        0.99: 53.54,\n        0.975: 57.15,\n        0.95: 60.39,\n        0.9: 64.28,\n        0.5: 79.33,\n        0.1: 96.58,\n        0.05: 101.88,\n        0.025: 106.63,\n        0.01: 112.33,\n        0.005: 116.32\n    },\n    90: {\n        0.995: 59.2,\n        0.99: 61.75,\n        0.975: 65.65,\n        0.95: 69.13,\n        0.9: 73.29,\n        0.5: 89.33,\n        0.1: 107.57,\n        0.05: 113.14,\n        0.025: 118.14,\n        0.01: 124.12,\n        0.005: 128.3\n    },\n    100: {\n        0.995: 67.33,\n        0.99: 70.06,\n        0.975: 74.22,\n        0.95: 77.93,\n        0.9: 82.36,\n        0.5: 99.33,\n        0.1: 118.5,\n        0.05: 124.34,\n        0.025: 129.56,\n        0.01: 135.81,\n        0.005: 140.17\n    }\n};\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // "Probability and Statistics in Engineering and Management Science", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    var inputMean = mean(data);\n    // Calculated value of the χ2 statistic.\n    var chiSquared = 0;\n    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n    // Lose one degree of freedom for estimating `lambda` from the sample data.\n    var c = 1;\n    // The hypothesized distribution.\n    // Generate the hypothesized distribution.\n    var hypothesizedDistribution = distributionType(inputMean);\n    var observedFrequencies = [];\n    var expectedFrequencies = [];\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (var i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (var i$1 = 0; i$1 < observedFrequencies.length; i$1++) {\n        if (observedFrequencies[i$1] === undefined) {\n            observedFrequencies[i$1] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (var k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (var k$1 = expectedFrequencies.length - 1; k$1 >= 0; k$1--) {\n        if (expectedFrequencies[k$1] < 3) {\n            expectedFrequencies[k$1 - 1] += expectedFrequencies[k$1];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k$1 - 1] += observedFrequencies[k$1];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (var k$2 = 0; k$2 < observedFrequencies.length; k$2++) {\n        chiSquared +=\n            Math.pow(observedFrequencies[k$2] - expectedFrequencies[k$2], 2) /\n            expectedFrequencies[k$2];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    // Degrees of freedom, calculated as (number of class intervals -\n    // number of hypothesized distribution parameters estimated - 1)\n    var degreesOfFreedom = observedFrequencies.length - c - 1;\n    return (\n        chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared\n    );\n}\n\nvar SQRT_2PI$1 = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nvar kernels = {\n    /**\n     * The gaussian kernel.\n     * @private\n     */\n    gaussian: function (u) {\n        return Math.exp(-0.5 * u * u) / SQRT_2PI$1;\n    }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nvar bandwidthMethods = {\n    /**\n     * The ["normal reference distribution"\n     * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n     * a commonly used version of [Silverman\'s\n     * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n     * @private\n     */\n    nrd: function (x) {\n        var s = sampleStandardDeviation(x);\n        var iqr = interquartileRange(x);\n        if (typeof iqr === "number") {\n            s = Math.min(s, iqr / 1.34);\n        }\n        return 1.06 * s * Math.pow(x.length, -0.2);\n    }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to \'gaussian\'.\n * @param bandwidthMethod The "bandwidth selection" method to use, or a fixed bandwidth value. Defaults to "nrd", the commonly-used ["normal reference distribution" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n    var kernelFn;\n    if (kernel === undefined) {\n        kernelFn = kernels.gaussian;\n    } else if (typeof kernel === "string") {\n        if (!kernels[kernel]) {\n            throw new Error(\'Unknown kernel "\' + kernel + \'"\');\n        }\n        kernelFn = kernels[kernel];\n    } else {\n        kernelFn = kernel;\n    }\n\n    var bandwidth;\n    if (typeof bandwidthMethod === "undefined") {\n        bandwidth = bandwidthMethods.nrd(X);\n    } else if (typeof bandwidthMethod === "string") {\n        if (!bandwidthMethods[bandwidthMethod]) {\n            throw new Error(\n                \'Unknown bandwidth method "\' + bandwidthMethod + \'"\'\n            );\n        }\n        bandwidth = bandwidthMethods[bandwidthMethod](X);\n    } else {\n        bandwidth = bandwidthMethod;\n    }\n\n    return function (x) {\n        var i = 0;\n        var sum = 0;\n        for (i = 0; i < X.length; i++) {\n            sum += kernelFn((x - X[i]) / bandwidth);\n        }\n        return sum / bandwidth / X.length;\n    };\n}\n\n/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student\'s t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * zScore(78, 80, 5); // => -0.4\n */\nfunction zScore(x, mean, standardDeviation) {\n    return (x - mean) / standardDeviation;\n}\n\nvar SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    var sum = z,\n        tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (var i = 1; i < 15; i++) {\n        tmp *= (z * z) / (2 * i + 1);\n        sum += tmp;\n    }\n    return (\n        Math.round((0.5 + (sum / SQRT_2PI) * Math.exp((-z * z) / 2)) * 1e4) /\n        1e4\n    );\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Φ (phi), which are the values of\n * the [cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function)\n * of the normal distribution. It is used to find the probability that a\n * statistic is observed below, above, or between values on the standard\n * normal distribution, and by extension, any normal distribution.\n */\nvar standardNormalTable = [];\n\nfor (var z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z) {\n    // Calculate the position of this value.\n    var absZ = Math.abs(z);\n    // Each row begins with a different\n    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n    // corresponds to a range of 0.01 in the input values, so the value is\n    // multiplied by 100.\n    var index = Math.min(\n        Math.round(absZ * 100),\n        standardNormalTable.length - 1\n    );\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they\'re computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\n/**\n * **[Logistic Cumulative Distribution Function](https://en.wikipedia.org/wiki/Logistic_distribution)**\n *\n * @param {number} x\n * @returns {number} cumulative standard logistic probability\n */\nfunction cumulativeStdLogisticProbability(x) {\n    return 1 / (Math.exp(-x) + 1);\n}\n\n/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n * It uses Horner\'s method to evaluate the polynomial of τ (tau).\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1).toFixed(2); // => \'0.84\'\n */\nfunction errorFunction(x) {\n    var t = 1 / (1 + 0.5 * Math.abs(x));\n    var tau =\n        t *\n        Math.exp(\n            -x * x +\n                ((((((((0.17087277 * t - 0.82215223) * t + 1.48851587) * t -\n                    1.13520398) *\n                    t +\n                    0.27886807) *\n                    t -\n                    0.18628806) *\n                    t +\n                    0.09678418) *\n                    t +\n                    0.37409196) *\n                    t +\n                    1.00002368) *\n                    t -\n                1.26551223\n        );\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\n/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x) {\n    var a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    var inv = Math.sqrt(\n        Math.sqrt(\n            Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n                Math.log(1 - x * x) / a\n        ) -\n            (2 / (Math.PI * a) + Math.log(1 - x * x) / 2)\n    );\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p\'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p) {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\n/**\n * The [Logit](https://en.wikipedia.org/wiki/Logit)\n * is the inverse of cumulativeStdLogisticProbability,\n * and is also known as the logistic quantile function.\n *\n * @param {number} p\n * @returns {number} logit\n */\nfunction logit(p) {\n    if (p <= 0 || p >= 1) {\n        throw new Error("p must be strictly between zero and one");\n    }\n    return Math.log(p / (1 - p));\n}\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either \'two_sided\' (default), \'greater\', or \'less\'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n    // Set default arguments\n    if (k === undefined) {\n        k = 10000;\n    }\n    if (alternative === undefined) {\n        alternative = "two_side";\n    }\n    if (\n        alternative !== "two_side" &&\n        alternative !== "greater" &&\n        alternative !== "less"\n    ) {\n        throw new Error(\n            "`alternative` must be either \'two_side\', \'greater\', or \'less\'."\n        );\n    }\n\n    // get means for each sample\n    var meanX = mean(sampleX);\n    var meanY = mean(sampleY);\n\n    // calculate initial test statistic. This will be our point of comparison with\n    // the generated test statistics.\n    var testStatistic = meanX - meanY;\n\n    // create test-statistic distribution\n    var testStatDsn = new Array(k);\n\n    // combine datsets so we can easily shuffle later\n    var allData = sampleX.concat(sampleY);\n    var midIndex = Math.floor(allData.length / 2);\n\n    for (var i = 0; i < k; i++) {\n        // 1. shuffle data assignments\n        shuffleInPlace(allData, randomSource);\n        var permLeft = allData.slice(0, midIndex);\n        var permRight = allData.slice(midIndex, allData.length);\n\n        // 2.re-calculate test statistic\n        var permTestStatistic = mean(permLeft) - mean(permRight);\n\n        // 3. store test statistic to build test statistic distribution\n        testStatDsn[i] = permTestStatistic;\n    }\n\n    // Calculate p-value depending on alternative\n    // For this test, we calculate the percentage of \'extreme\' test statistics (subject to our hypothesis)\n    // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n    var numExtremeTStats = 0;\n    if (alternative === "two_side") {\n        for (var i$1 = 0; i$1 <= k; i$1++) {\n            if (Math.abs(testStatDsn[i$1]) >= Math.abs(testStatistic)) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else if (alternative === "greater") {\n        for (var i$2 = 0; i$2 <= k; i$2++) {\n            if (testStatDsn[i$2] >= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else {\n        // alternative === \'less\'\n        for (var i$3 = 0; i$3 <= k; i$3++) {\n            if (testStatDsn[i$3] <= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    }\n\n    return numExtremeTStats / k;\n}\n\n/**\n * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function\n * that extracts the sign of a real number\n *\n * @param {number} x input value\n * @returns {number} sign value either 1, 0 or -1\n * @throws {TypeError} if the input argument x is not a number\n * @private\n *\n * @example\n * sign(2); // => 1\n */\nfunction sign(x) {\n    if (typeof x === "number") {\n        if (x < 0) {\n            return -1;\n        } else if (x === 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n    } else {\n        throw new TypeError("not a number");\n    }\n}\n\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding\n * method that repeatedly bisects an interval to find the root.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {Function} func input function\n * @param {number} start - start of interval\n * @param {number} end - end of interval\n * @param {number} maxIterations - the maximum number of iterations\n * @param {number} errorTolerance - the error tolerance\n * @returns {number} estimated root value\n * @throws {TypeError} Argument func must be a function\n *\n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(func, start, end, maxIterations, errorTolerance) {\n    if (typeof func !== "function")\n        { throw new TypeError("func must be a function"); }\n\n    for (var i = 0; i < maxIterations; i++) {\n        var output = (start + end) / 2;\n\n        if (\n            func(output) === 0 ||\n            Math.abs((end - start) / 2) < errorTolerance\n        ) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n\n    throw new Error("maximum number of iterations exceeded");\n}\n\n/**\n * Calculate Euclidean distance between two points.\n * @param {Array<number>} left First N-dimensional point.\n * @param {Array<number>} right Second N-dimensional point.\n * @returns {number} Distance.\n */\nfunction euclideanDistance(left, right) {\n    var sum = 0;\n    for (var i = 0; i < left.length; i++) {\n        var diff = left[i] - right[i];\n        sum += diff * diff;\n    }\n    return Math.sqrt(sum);\n}\n\n/**\n * @typedef {Object} kMeansReturn\n * @property {Array<number>} labels The labels.\n * @property {Array<Array<number>>} centroids The cluster centroids.\n */\n\n/**\n * Perform k-means clustering.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points to be clustered.\n * @param {number} numCluster How many clusters to create.\n * @param {Function} randomSource An optional entropy source that generates uniform values in [0, 1).\n * @return {kMeansReturn} Labels (same length as data) and centroids (same length as numCluster).\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n *\n * @example\n * kMeansCluster([[0.0, 0.5], [1.0, 0.5]], 2); // => {labels: [0, 1], centroids: [[0.0, 0.5], [1.0 0.5]]}\n */\nfunction kMeansCluster(points, numCluster, randomSource) {\n    if ( randomSource === void 0 ) randomSource = Math.random;\n\n    var oldCentroids = null;\n    var newCentroids = sample(points, numCluster, randomSource);\n    var labels = null;\n    var change = Number.MAX_VALUE;\n    while (change !== 0) {\n        labels = labelPoints(points, newCentroids);\n        oldCentroids = newCentroids;\n        newCentroids = calculateCentroids(points, labels, numCluster);\n        change = calculateChange(newCentroids, oldCentroids);\n    }\n    return {\n        labels: labels,\n        centroids: newCentroids\n    };\n}\n\n/**\n * Label each point according to which centroid it is closest to.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<Array<number>>} centroids Current centroids.\n * @return {Array<number>} Group labels.\n */\nfunction labelPoints(points, centroids) {\n    return points.map(function (p) {\n        var minDist = Number.MAX_VALUE;\n        var label = -1;\n        for (var i = 0; i < centroids.length; i++) {\n            var dist = euclideanDistance(p, centroids[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                label = i;\n            }\n        }\n        return label;\n    });\n}\n\n/**\n * Calculate centroids for points given labels.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<number>} labels Which groups points belong to.\n * @param {number} numCluster Number of clusters being created.\n * @return {Array<Array<number>>} Centroid for each group.\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n */\nfunction calculateCentroids(points, labels, numCluster) {\n    // Initialize accumulators.\n    var dimension = points[0].length;\n    var centroids = makeMatrix(numCluster, dimension);\n    var counts = Array(numCluster).fill(0);\n\n    // Add points to centroids\' accumulators and count points per centroid.\n    var numPoints = points.length;\n    for (var i = 0; i < numPoints; i++) {\n        var point = points[i];\n        var label = labels[i];\n        var current = centroids[label];\n        for (var j = 0; j < dimension; j++) {\n            current[j] += point[j];\n        }\n        counts[label] += 1;\n    }\n\n    // Rescale centroids, checking for any that have no points.\n    for (var i$1 = 0; i$1 < numCluster; i$1++) {\n        if (counts[i$1] === 0) {\n            throw new Error(("Centroid " + i$1 + " has no friends"));\n        }\n        var centroid = centroids[i$1];\n        for (var j$1 = 0; j$1 < dimension; j$1++) {\n            centroid[j$1] /= counts[i$1];\n        }\n    }\n\n    return centroids;\n}\n\n/**\n * Calculate the difference between old centroids and new centroids.\n *\n * @private\n * @param {Array<Array<number>>} left One list of centroids.\n * @param {Array<Array<number>>} right Another list of centroids.\n * @return {number} Distance between centroids.\n */\nfunction calculateChange(left, right) {\n    var total = 0;\n    for (var i = 0; i < left.length; i++) {\n        total += euclideanDistance(left[i], right[i]);\n    }\n    return total;\n}\n\n/**\n * Calculate the [silhouette values](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for clustered data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<number>} The silhouette value for each point.\n *\n * @example\n * silhouette([[0.25], [0.75]], [0, 0]); // => [1.0, 1.0]\n */\nfunction silhouette(points, labels) {\n    if (points.length !== labels.length) {\n        throw new Error("must have exactly as many labels as points");\n    }\n    var groupings = createGroups(labels);\n    var distances = calculateAllDistances(points);\n    var result = [];\n    for (var i = 0; i < points.length; i++) {\n        var s = 0;\n        if (groupings[labels[i]].length > 1) {\n            var a = meanDistanceFromPointToGroup(\n                i,\n                groupings[labels[i]],\n                distances\n            );\n            var b = meanDistanceToNearestGroup(\n                i,\n                labels,\n                groupings,\n                distances\n            );\n            s = (b - a) / Math.max(a, b);\n        }\n        result.push(s);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table mapping group IDs to point IDs.\n *\n * @private\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<Array<number>>} An array of length G, each of whose entries is an array\n * containing the indices of the points in that group.\n */\nfunction createGroups(labels) {\n    var numGroups = 1 + max(labels);\n    var result = Array(numGroups);\n    for (var i = 0; i < labels.length; i++) {\n        var label = labels[i];\n        if (result[label] === undefined) {\n            result[label] = [];\n        }\n        result[label].push(i);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table of all inter-point distances.\n *\n * @private\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @return {Array<Array<number>>} A symmetric square array of inter-point distances\n * (zero on the diagonal).\n */\nfunction calculateAllDistances(points) {\n    var numPoints = points.length;\n    var result = makeMatrix(numPoints, numPoints);\n    for (var i = 0; i < numPoints; i++) {\n        for (var j = 0; j < i; j++) {\n            result[i][j] = euclideanDistance(points[i], points[j]);\n            result[j][i] = result[i][j];\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between this point and all the points in the\n * nearest group (as determined by which point in another group is closest).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} labels Labels of points.\n * @param {Array<Array<number>>} groupings An array whose entries are arrays\n * containing the indices of the points in that group.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the nearest\n * group.\n */\nfunction meanDistanceToNearestGroup(which, labels, groupings, distances) {\n    var label = labels[which];\n    var result = Number.MAX_VALUE;\n    for (var i = 0; i < groupings.length; i++) {\n        if (i !== label) {\n            var d = meanDistanceFromPointToGroup(\n                which,\n                groupings[i],\n                distances\n            );\n            if (d < result) {\n                result = d;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between a point and all the points in a group\n * (possibly its own).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} group The indices of all the points in the group in\n * question.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the\n * specified group.\n */\nfunction meanDistanceFromPointToGroup(which, group, distances) {\n    var total = 0;\n    for (var i = 0; i < group.length; i++) {\n        total += distances[which][group[i]];\n    }\n    return total / group.length;\n}\n\n/**\n * Calculate the [silhouette metric](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for a set of N-dimensional points arranged in groups. The metric is the largest\n * individual silhouette value for the data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {number} The silhouette metric for the groupings.\n *\n * @example\n * silhouetteMetric([[0.25], [0.75]], [0, 0]); // => 1.0\n */\nfunction silhouetteMetric(points, labels) {\n    var values = silhouette(points, labels);\n    return max(values);\n}\n\n/**\n * Relative error.\n *\n * This is more difficult to calculate than it first appears [1,2].  The usual\n * formula for the relative error between an actual value A and an expected\n * value E is `|(A-E)/E|`, but:\n *\n * 1. If the expected value is 0, any other value has infinite relative error,\n *    which is counter-intuitive: if the expected voltage is 0, getting 1/10th\n *    of a volt doesn\'t feel like an infinitely large error.\n *\n * 2. This formula does not satisfy the mathematical definition of a metric [3].\n *    [4] solved this problem by defining the relative error as `|ln(|A/E|)|`,\n *    but that formula only works if all values are positive: for example, it\n *    reports the relative error of -10 and 10 as 0.\n *\n * Our implementation sticks with convention and returns:\n *\n * - 0 if the actual and expected values are both zero\n * - Infinity if the actual value is non-zero and the expected value is zero\n * - `|(A-E)/E|` in all other cases\n *\n * [1] https://math.stackexchange.com/questions/677852/how-to-calculate-relative-error-when-true-value-is-zero\n * [2] https://en.wikipedia.org/wiki/Relative_change_and_difference\n * [3] https://en.wikipedia.org/wiki/Metric_(mathematics)#Definition\n * [4] F.W.J. Olver: "A New Approach to Error Arithmetic." SIAM Journal on\n *     Numerical Analysis, 15(2), 1978, 10.1137/0715024.\n *\n * @param {number} actual The actual value.\n * @param {number} expected The expected value.\n * @return {number} The relative error.\n */\nfunction relativeError(actual, expected) {\n    if (actual === 0 && expected === 0) {\n        return 0;\n    }\n    return Math.abs((actual - expected) / expected);\n}\n\n/**\n * Approximate equality.\n *\n * @param {number} actual The value to be tested.\n * @param {number} expected The reference value.\n * @param {number} tolerance The acceptable relative difference.\n * @return {boolean} Whether numbers are within tolerance.\n */\nfunction approxEqual(actual, expected, tolerance) {\n    if ( tolerance === void 0 ) tolerance = epsilon;\n\n    return relativeError(actual, expected) <= tolerance;\n}\n\n\n//# sourceMappingURL=simple-statistics.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///809\n')}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(g,I)=>{for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(g,n)&&Object.defineProperty(g,n,{enumerable:!0,get:I[n]})},__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(107)})();